TO ALL
FROM 吕凯
本周由我负责Release编译,以后周磊负责。

有以下需要注意的地方：
一、代码路径：
二、svn基本使用(非图形)：
三、编译相关
四、添加一个新项目得方法
五、关于本次base修改需要注意得地方
六、补充，未整理

=========================
一、代码路径：
=========================
http://10.1.29.125/svn/sony/trunk/Source/
应该使用svn对它们检出。

http://10.1.29.125/svn/sony/trunk/Source/Rootfs/diablo/diabloMainCpu
这个是本次base release时候修改得svn目录。

smb://10.1.29.125/SonyFS/src/MediaBlock_MXFS6_Release_20100727-01.zip
本次base上svn代码就是基于这个路径得代码修改得。


=========================
二、svn基本使用(非图形)：
=========================
1,检出代码：
svn checkout http://10.1.29.125/svn/sony/trunk/Source/
检出之后，本地就有了一个工作拷贝，可以在此基础上进行修改,修改之后可以把本地修改得部分提交(见后面)到svn服务器上供他人更新(见后面)使用。
检出之时，会提示两次输入用户密码，一次是输入你本地机器的用户名密码，一次是服务器得。

2,提交之前检测：
svn status
提交之前，可以先检测一下，看自己修改,删除(svn delete)，添加(svn add)了哪些文件，哪些文件没有添加到版本控制，以及做了什么，这个命令输出得含义参考"svn help status",便于在提交之前确认本次提交操作得正确性。

3,提交修改：
svn commit -m "<你要添加得说明>"
这里，"<你要添加得说明>"将会在后面提到得"svn log"命令输出。

4,查看从前提交的log：
svn log
这样，会输出每次提交得日志信息。

5,最新版本取出：
svn update
这一步一般在每次工作（即修改本地工作拷贝）之前，保证自己得修改在最新得版本基础上进行。

6,取出以前版本：
svn update -r <version>
这里，将会取出以前第"<version>"版得工作拷贝，具体<version>是多少，需要查看"svn log"来确定。

7,添加/删除文件：
svn add <filename>
svn delete <filename>
如果我们想要让svn管理新建立得文件，需用"svn add",反之用"svn delete",这两个命令执行完毕之后，需要"svn commit"才能反应到服务器上。
这里，没有add得文件，不会在"svn commit"得时候被提交，可以通过'svn status'查看这个文件是否被add过。

8.查看版本库管理得文件：
svn ls

9,查看当前路径工作拷贝得全局信息：
svn info
这条命令可以显示当前路径得工作拷贝在服务器上的检出路径，以及最新修改等信息.

10,撤消修改：
svn revert
如果提交之前，发现当前修改错了，或者添加/删除文件错了，可以运行这个命令，重新对本地工作拷贝进行修改。

注意，以上命令一般都是递归的在当前目录进行，不影响父目录其它文件和目录。以上命令一般可以再添加一个文件/目录参数，对指定得文件/目录进行管理。
使用svn，一般得工作周期是：
1)更新本地工作拷贝
svn update
2)修改代码
3)添加新增文件(如果需要得话)
svn add/delete
4)检测修改状态
svn status
5)提交修改
svn commit -m ""
更多svn的信息参见http://i18n-zh.googlecode.com/svn-history/r734/www/svnbook-1.4/index.html


=========================
三、编译相关
=========================
1,环境搭建：
1.1)centeros 安装.（省略）
1.2)yum配置：
$sudo vi /etc/yum.conf
添加如下行：
Proxy=http://user:passwd@dl-proxy.neusoft.com:8080/
$sudo yum update
1.3)安装编译环境：
1.3.1)安装交叉编译工具链
smb://10.1.29.125/share/ALL/SONY-CE-Linux-5.0.4.1-ARM.iso
其中install_en.txt里面有相关得文档。
具体如下：
#cd SONY-CE-Linux-5.0.4.1-ARM/Tools_Userland/arm
#rpm -e $(rpm -qa "arm-sony-linux-gnueabi-*")
#rm -rf /usr/local/arm-sony-linux-gnueabi/
#rpm -Uvh --ignorearch *.rpm
以下可选的交叉工具：
cd ../arm/optional/
rpm -Uvh --ignorearch arm-sony-linux-gnueabi-cross-prelink-for-dev-0.3.9-05000401.i386.rpm
rpm -Uvh --ignorearch arm-sony-linux-gnueabi-cross-prelink-for-srel-0.3.9-05000402.i386.rpm
rpm -Uvh --ignorearch arm-sony-linux-gnueabi-host-elfutils-0.130-05000401.i386.rpm
安装了这几个就有arm-sony-linux-gnueabi-ldd等工具了。

1.3.2)编译内核
为了编译内核添加如下路径到环境变量：
/usr/local/arm-sony-linux-gnueabi/devel/bin/
然后下载smb://10.1.29.125/SonyFS/Documents/TechnologyDoc/CELinux/CELinux/diablo/20100326/linux-5_0_DIABLO_20100326-src-kernel.tar.gz
解压之后，
依次运行：
./setup-avp13
make
make kernel_headers
sudo make kernel_headers_install
这样就可以编译应用程序了。
为了编译应用程序，应该添加如下路径到环境变量：
/usr/local/arm-sony-linux-gnueabi/bin

注意：编译内核相关得环境变量添加“/usr/local/arm-sony-linux-gnueabi/devel/bin/“，编译app的环境变量添加“/usr/local/arm-sony-linux-gnueabi/bin”。
为了方便开发，不用每次启动shell时手动添加，可以添加如下到/etc/bashrc中：
#编译内核时：
export PATH=/usr/local/arm-sony-linux-gnueabi/devel/bin/:$PATH
#编译 app时：
export PATH=/usr/local/arm-sony-linux-gnueabi/bin:$PATH

2,代码编译：
每次修改完代码，编译过程如下：
$cd build
$./build.sh
这样会根据时间戳编译最新得内容。在第一次编译前需要运行./build.sh depend，参照"四、添加一个新项目得方法"
编译得全部log信息存放在build_Diablo.log
编译如果出错，那么错误信息存放在error.log
上次得编译log以及编译错误分别存放在：build_Diablo.old.log和error.old.log

清除之前的编译中间文件：
./build.sh clean

3,运行方法：
目前暂时无法用开发板子上运行测试，大致如下：
编译好的文件在build/diablo.bin下，
需要拷贝到文件系统下，
然后再把osWrapper中得相关库文件拷贝到文件系统下，
然后把新拷贝得osWrapper库路径添加到环境变量LD_LIBRARY_PATH中。


=========================
四、添加一个新项目得方法
=========================
举例如下：
假设我要添加一个User_test目录，其中包含test.h test.c,那么：
1)编辑build/incpaths.mk文件
1.1)找到"# Main DIR"注释处，添加定义新目录对应变量的语句如下：
USER_TEST= $(SRCROOT)/User_test
1.2)找到"ALL_PATHS"变量得定义，在其最后添加刚才得新变量如下：
############
$(USER_TEST) \

2)新建User_test/usertest.mk文件，内容如下：

USER_TEST_SOURCES=    \   
    test.c
USER_TEST_OBJS :=  $(addprefix $(TARGETDIR)/, $(USER_TEST_SOURCES:%.c=%.o))
USER_TEST_DEPS :=  $(addprefix $(TARGETDIR)/, $(USER_TEST_SOURCES:%.c=%.dep))

vpath %.c $(USER_TEST)
############

3)编辑build/diablo_objects.mk文件，在最后添加如下：
include $(USER_TEST)/usertest.mk

4)编辑Diablo.make,在OBJECTS变量最后追加一条：
$(USER_TEST_OBJS) \

5)重新生成依赖：
./build.sh clean
./build.sh depend

6)编译：
./build.sh
可参见上面。

具体参见build.sh脚本。

=========================
五、关于本次base修改需要注意得地方：
=========================
1)为编译正常通过，需要解决文件依赖，我们已经将base中所有包含"VxWorks"相关头文件得地方替换成'#include "oswrapper.h"'.同时原来被替换得相关内容被注释且做了相应标记，便于查找。除此之外，都尽量保持其它得代码不变。

2)osWrapper中是对vxworks接口的封装，
其中,osWrapper/dummy.h,和osWrapper/dummy.c中是重新封装得部分vxworks得接口，其中许多函数是空，有待实现。

3)zou3Kernel中内容和驱动相关不能直接使用，所以只包含其原有得内容中的.h文件，没有让zou3Kernel的.c文件参与编译。
另外,为保证全编译通过，对包含进来得zou3Kernel.h中得相关声明的实现，在zou3Kernel/kdummy.c中进行了实现(大都是空实现)

4)有一些结构其vxworks上的定义和linux定义不一致，所以进行了一些处理，以使编译通过。
例如，如果有的结构成员不存在，那么就将相关访问得地方屏蔽掉，并且做了标记。
具体应该怎样做还需相关部分模块自行判断。
修改过程中，记录得相关此类得修改，例如：
4.1). DIR->DIR_VXWORKS
即原有DIR和使用得DIR结构不符合，所以根据编译错误提示，自定义了结构DIR_VXWORKS，替代原来得所有DIR，具体结构实现需要相关组来明确。
4.2).如下编译错误，表明访问了不存在得结构成员：
stat structure is not match vxworks's, missed member:attrib
stat structure is not match vxworks's, missed member:st_attrib
已经将其屏蔽掉了。
4.3). zou3Mux/MXF/Lib/mxMp4ToMxfHeaderCreate.c:672: undefined reference to `index' deleted
4.4). zou3Mux/MXF/Lib/mxMp4ToMxfTranscode.c:4846: undefined reference to `index' deleted
4.5). dosFsLib.h IMPORT wrappered as "extern" resulted the link error.
original:
IMPORT STATUS (*dosFsFmtRtn)( char *path, device_t, int opt, FUNCPTR pPromptFunc, sector_t, sector_t, u_int, void *, ULONG);
current:
STATUS (*dosFsFmtRtn)( char *path, device_t, int opt, FUNCPTR pPromptFunc, sector_t, sector_t, u_int, void *, ULONG);

5)目前编译如果发现osWrapper中没有相关得库(即lib*.so),可以先在这里make一下，然后继续正常编译。
需要在以后得版本中对相应脚本进行修改。


=========================
六、补充，未整理
=========================
能够进行x86版本编译和调试的diabloMainCpu代码已经更新到SVN，请大家使用并 
调试本组担当和主推的流程。
使用方法更新如下：
编辑diabloMainCpu/build/build.sh
PLATFORMPARAM="USE_ARM=yes" //编译ARM版本
PLATFORMPARAM="USE_ARM=no" //x86 debug版本
这两个版本编译的结果都是diablo.bin文件。
