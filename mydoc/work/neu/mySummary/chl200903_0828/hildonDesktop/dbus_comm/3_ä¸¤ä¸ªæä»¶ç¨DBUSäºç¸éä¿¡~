
这篇是上一篇"5_两个插件用DBUS通信的方法总结"的扩展，它可以实现两个插件的双向通信。
另外需要注意的一点是，
*************************************************************************************************************
修改代码（关键）
1）hello-world_statusbar：
hello-world-statusbar.c文件中做如下修改：
1.1)开始加入如下：（在#include "hello-world-statusbar.h"语句的前面）
# define OSSO_EXAMPLE2_NAME       "hello_homearea"
# define OSSO_EXAMPLE2_SERVICE    "com.nokia."OSSO_EXAMPLE2_NAME
# define OSSO_EXAMPLE2_OBJECT     "/com/nokia/"OSSO_EXAMPLE2_NAME
# define OSSO_EXAMPLE2_IFACE      "com.nokia."OSSO_EXAMPLE2_NAME
#define OSSO_EXAMPLE2_MESSAGE "hidearea"

1.2)




在hildon_status_bar_helloworld_init函数之前定义如下函数：
添加一个按钮回调函数：
void my_button_pressed(GtkWidget *widget, GdkEventButton *event, gpointer data)
{/*发送消息给homearea*/
        
    osso_context_t *osso_context;
   
    osso_return_t ret;
    /* Initialize maemo application */
    osso_context = osso_initialize(OSSO_EXAMPLE2_SERVICE, "0.0.1", TRUE, NULL);
        static gint flag = 0;
    /* Check that initialization was ok */
    if (osso_context == NULL) {
                g_print ("Error initialize osso in homearea\n");
                return;
}

1.3）
修改函数：static void hildon_status_bar_helloworld_init(HildonStatusBarHelloWorld *helloworld)
如下：
static void hildon_status_bar_helloworld_init(HildonStatusBarHelloWorld *helloworld)
{

    HildonStatusBarHelloWorldPrivate *info = 
    HILDON_STATUS_BAR_HELLOWORLD_GET_PRIVATE(helloworld);
    osso_return_t result ;/*for dbus*/
    ULOG_OPEN("hildon-sb-helloworld");

    g_return_if_fail(info);

    info->icon = gtk_image_new_from_pixbuf(NULL);
    info->button = gtk_toggle_button_new();/*lkcomment button on the status bar*/
 
gtk_container_add(GTK_CONTAINER(helloworld), info->button);/*响应回调函数(发送消息给homearea)*/
    
set_helloworld_icon("hello-world", info);

    gtk_container_add(GTK_CONTAINER(info->button),
                      GTK_WIDGET(info->icon));/*lkdel*/

    gtk_container_add(GTK_CONTAINER(helloworld), info->button);

 /**************************从这里接收homeareaDBUS通信消息！！******************************************/
    
    info->osso = osso_initialize("hildon_sb_helloworld", "1.0", FALSE, NULL);/*初始化通信相关变量*/
    if (!info->osso)
        ULOG_WARN("%s: error while initializing osso\n", __FUNCTION__);


    /*关键，连接收到消息之后的处理函数*/
    result = osso_rpc_set_cb_f(info->osso,
			                    OSSO_EXAMPLE_SERVICE ,
			                    OSSO_EXAMPLE_OBJECT ,
			                    OSSO_EXAMPLE_IFACE ,
			                    dbus_req_handler , info->button);
    if ( result != OSSO_OK )
     {
      g_print ("Error setting D-BUS callback (%d) in statusbar\n", result );
      return ;
     }

    gtk_widget_show_all(GTK_WIDGET(helloworld));
}

----------------------至此，statusbar上插件的消息代码添加完毕------------------------------------------
2）hello-world_homearea：
修改hello-world-home.c如下：
2.1)
在开始（HD_DEFINE_PLUGIN (HelloHomePlugin, hello_home_plugin, HILDON_DESKTOP_TYPE_HOME_ITEM);的语句之前）
添加宏定义和包含文件：

#include <libosso.h>
# define OSSO_EXAMPLE2_NAME       "hello_homearea"
# define OSSO_EXAMPLE2_SERVICE    "com.nokia."OSSO_EXAMPLE2_NAME
# define OSSO_EXAMPLE2_OBJECT     "/com/nokia/"OSSO_EXAMPLE2_NAME
# define OSSO_EXAMPLE2_IFACE      "com.nokia."OSSO_EXAMPLE2_NAME

2.2)
在hello_home_plugin_init 函数之前添加按钮的回调函数：
static void my_button(GtkWidget *button, gpointer data)
{
    osso_context_t *osso_context;
    osso_return_t ret;

    /*初始化通信相关的变量 */
    osso_context = osso_initialize(OSSO_EXAMPLE_SERVICE, "0.0.1", TRUE, NULL);
    
    static gint flag = 0;/*flag标志表示显示(0)还是隐藏(1)statusbar上面的插件*/ 
    
    if (osso_context == NULL) {/* 检测初始化是否正确 */
        	g_print ("Error initialize osso in homearea\n");
		return;
    }

  /*关键!!发送消息,发送的消息在倒数第三个参数上面*/
    ret = osso_rpc_run(osso_context, 
			OSSO_EXAMPLE_SERVICE, 
			OSSO_EXAMPLE_OBJECT, 
			OSSO_EXAMPLE_IFACE, 
			(flag^=1)==1?OSSO_EXAMPLE_MESSAGE:"show", NULL, DBUS_TYPE_INVALID);

  /*释放资源*/
    osso_deinitialize(osso_context);
    g_print("home button1 test\n");
}
2.3)

在开始添加接收消息的回调函数（HD_DEFINE_PLUGIN (HelloHomePlugin, hello_home_plugin, HILDON_DESKTOP_TYPE_HOME_ITEM);语句后面）：
gint dbus_req_handler (const gchar * interface , const gchar * method ,
                       GArray * arguments , gpointer data ,
                       osso_rpc_t * retval )
{
    char *appdata ;
    appdata = (char*) data;
        g_print(method);
    g_print("good!Message transfered from statusbar to homearea ");
        //osso_rpc_free_val ( retval );
        //if(!g_strcmp0((char*)method, "hidearea"))
        if(method[0] == 'h')
                gtk_widget_hide(GTK_WIDGET(data));
        else
                gtk_widget_show(GTK_WIDGET(data));
    return OSSO_OK ;

}


修改hello_home_plugin_init的代码如下：
static void
hello_home_plugin_init (HelloHomePlugin *home_plugin)
{
  GtkWidget *button;
  GtkWidget *button1;/*单击此按钮实现隐藏和显示statusbar上的helloworld插件*/
  GtkWidget *hbox;
   osso_return_t result ;

  hbox = gtk_hbox_new(TRUE, 0);
  gtk_container_add (GTK_CONTAINER (home_plugin), hbox);

  button = hello_world_button_new (10);
  g_signal_connect (button, "clicked",
		    G_CALLBACK (hello_world_dialog_show),
		    NULL);

  gtk_box_pack_start(GTK_BOX(hbox),button, TRUE, TRUE, 0);
  
  
  button1 = gtk_button_new_with_label("show_hide");
/*将该按钮连接到回调函数上，回调函数实现消息的发送*/
  g_signal_connect(G_OBJECT(button1), "clicked", G_CALLBACK(my_button), NULL);

  gtk_box_pack_start(GTK_BOX(hbox),button1, TRUE, TRUE, 0);


  hildon_desktop_home_item_set_resize_type (HILDON_DESKTOP_HOME_ITEM (home_plugin),
                                            HILDON_DESKTOP_HOME_ITEM_RESIZE_BOTH);

/**************开始接收消息*************/
 osso_context = osso_initialize("hello_homearea", "1.0", FALSE, NULL);
    if (osso_context)
        /*ULOG_WARN("%s: error while initializing osso_context\n", __FUNCTION__);*/
        g_print("error while initializing osso_context\n");


      
        result = osso_rpc_set_cb_f(osso_context,
                                            OSSO_EXAMPLE2_SERVICE ,
                                            OSSO_EXAMPLE2_OBJECT ,
                                            OSSO_EXAMPLE2_IFACE ,
                                            dbus_req_handler , button1);
            if ( result != OSSO_OK )
                {
                      g_print ("Error setting D-BUS callback (%d) in statusbar\n", result );
                      /*return OSSO_ERROR ;*/
                      return ;
                }
    /*osso_deinitialize(osso_context);*/


  gtk_widget_show_all(hbox);
}
----------------------至此，homearea上插件的消息代码添加完毕------------------------------------------
--------------------------------------------至此，应该修改的代码都已经修改完毕了-------------------------------------------


*************************************************************************************************************
2，修改配置文件：
我们至此已经把该有的代码都编写完毕了，但是这样还是不能够运行，我们需要建立D-Bus的服务配置文件.如下：
2.1)
>cd /usr/share/dbus-1/services/
2.2)
>touch com.nokia.hello_homearea.service
2.3)修改com.nokia.hello_homearea.service文件，内容如下：
###################################################################
# Sample service description file
[D-BUS Service]
Name=com.nokia.hello_homearea
Exec=/usr/lib/hildon-desktop/libhelloworld-home.so

###################################################################
这样，就可以了。

*************************************************************************************************************
本文参考的资料：
1）,http://maemo.org/development/documentation/tutorials/maemo_4-0_tutorial/
2），http://maemo.org/api_refs/4.0/libosso/group__RPC.html#gec4a3469c8fde01d2a4a0cfbc6db6fa7


