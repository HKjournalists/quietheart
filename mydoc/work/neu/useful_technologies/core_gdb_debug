CELinux应用程序（diablo.bin）crash调试的新方法－－Coredump

注：看完本文能大致掌握使用gdb和core文件定位程序crash的位置。
本文原作者：高聪

目录
一、说明
二、介绍Core Dump的用法(小程序)
三、CELinux应用程序（diablo.bin) Core Dump的用法

一、说明
1. 此方法是在Linux下，用户空间应用程序crash时调试使用。
2. 用户的nfs文件系统需要安装GDB调试环境。

二、介绍Core Dump的用法(小程序)
1.程序

#include <stdlib.h>

f2(int *p1, int *p2)
{
    int *p = NULL;
    *p = 1;
}
f1(int a, int b)
{
    f2(&a, &b);
}
main()
{
    f1(1, 2); 
}

2.编译
为gcc增加调试信息的编译选项 “-g“ ,编译生成带调试信息的应用程序。
eg. gcc -g exam.c -o exam
3.执行
#ulimit -c unlimited
#./exam
Segmentation fault (core dumped)
等待一会，确认core文件已经生成结束。

注意:这个时候会在应用程序所在目录生成 core.* 文件(coredump的文件名，eg. core.248)
4.调试
（首先确认，PC机已经安装gdb）
方法一：
＃mv core.248 core
＃gdb exam --core=core
方法二：
＃gdb exam core.248

屏幕显示以下信息：

GNU gdb 6.8-debian
Copyright (C) 2008 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu"...

warning: Can't read pathname for load map: Input/output error.
Reading symbols from /lib/tls/i686/cmov/libc.so.6...done.
Loaded symbols for /lib/tls/i686/cmov/libc.so.6
Reading symbols from /lib/ld-linux.so.2...done.
Loaded symbols for /lib/ld-linux.so.2
Core was generated by `./exam'.
Program terminated with signal 11, Segmentation fault.
[New process 22073]
#0  0x080483a4 in f2 (p1=0xbf802f88, p2=0xbf802f8c) at exam.c:6
6               *p = 1;

(gdb) bt  （输入bt 或者 where）  －－－－－－－－－－－－－－－－－（输入）
#0  0x080483a4 in f2 (p1=0xbf802f88, p2=0xbf802f8c) at exam.c:6
#1  0x080483c4 in f1 (a=1, b=2) at exam.c:10
#2  0x080483eb in main () at exam.c:14
(gdb) 
三、CELinux应用程序（diablo.bin) Core Dump的用法

1.程序
从svn下载最新代码svn://10.1.2.228....../Source/Rootfs

2.编译应用程序（内核正常编译）
1）修改Source/Rootfs/diablo/diabloMainCpu/build/diablo_flags.mk文件。
2）修改第3行 “＃CFLAGS += -g" --> “CFLAGS += -g" ,去掉注释
3）目的：为arm-sony-linux-gnueabi-gcc增加调试信息的编译选项 “-g“ ,编译生成带调试信息的应用程序。
4）编译应用程序 ./build.sh (多核的PC，可以使用命令 ./build.sh -jn 。 n为核数)

3.挂载文件系统（nfs）
    在编译时，执行makerootfs.sh后，会在目录Source/Rootfs/makerootfs/target/develop下，
生成用于develop的文件系统。
    用CoreDump的方法，需要挂载这个文件系统。

4.执行
启动开发板，进入shell
输入以下命令：
#ulimit -c unlimited
#./diablo.bin  （以调试dv录话为例）
执行录话的脚本后，程序会crash。
现象：
 / # [EXPCD] expcd_chardev_release() @42 :>
 [Fasync]  218 | fasync_setup() @85 :> filp=0xc0f86220, fd=-1, on=0
 [Fasync]  218 | fasync_setup() @86 :> delete listener=0xc0f86220, total=0
等待一会，确认core文件已经生成结束。

注意:这个时候会在应用程序所在目录生成 core.* 文件(coredump的文件名，eg. core.248)

5.调试
（首先确认，挂载的文件系统已经安装gdb）
方法一：
＃mv core.248 core
＃gdb diablo.bin --core=core
方法二：
＃gdb diablo.bin core.248

屏幕显示以下信息：

GNU gdb 6.6.50.20070701-cvs
Copyright (C) 2007 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "arm-sony-linux-gnueabi"...
Using host libthread_db library "/devel/lib/libsonythread_db.so.1".

warning: core file may not match specified executable file.
Reading symbols from /lib/libsonypthread.so...done.
Loaded symbols for /lib/libsonypthread.so
Reading symbols from /lib/libsonydl.so...done.
Loaded symbols for /lib/libsonydl.so
Reading symbols from /lib/libsonyrt.so...done.
Loaded symbols for /lib/libsonyrt.so
Reading symbols from /lib/libsonyc.so...done.
Loaded symbols for /lib/libsonyc.so
Reading symbols from /lib/libsonygcc_s.so.1...done.
Loaded symbols for /lib/libsonygcc_s.so.1
Reading symbols from /lib/libsonyld.so...done.
Loaded symbols for /lib/libsonyld.so
Core was generated by `./diablo_dvenc.bin'.
Program terminated with signal 11, Segmentation fault.
#0  0x4004038c in pthread_cleanup_push () from /lib/libsonypthread.so

(gdb)  bt  （输入bt 或者 where） －－－－－－－－－－－－－－－－－（输入）
#0  0x4004038c in pthread_cleanup_push () from /lib/libsonypthread.so
#1  0x003672a8 in taskMyTcb () at taskLib.c:111
#2  0x0036bc34 in msgQReceive (msgQId=0x50de29c0, buffer=0xb6bfef08 "",
    maxNBytes=48, timeout=-1) at msgQLib.c:1266
#3  0x001222d4 in fscCtrlTask ()
#4  0x00368728 in TaskThread (pTCB=0x50de2880) at taskLib.c:859
#5  0x40046380 in xxx_start_routine () from /lib/libsonypthread.so
#6  0x40073134 in clone () from /lib/libsonyc.so
Backtrace stopped: frame did not save the PC
(gdb) .

