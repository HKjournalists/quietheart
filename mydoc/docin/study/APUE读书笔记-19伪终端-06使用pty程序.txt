++++++APUE读书笔记-19伪终端-06使用pty程序++++++



6、使用pty程序
================================================
	我们现在，通过命令行选项，来看看使用pty程序的各种不同的例子。
	如果我们的shell是Korn shell，我们可以执行：
	pty ksh
	启动一个新的shell，这个shell运行在伪终端之下。
	如果文件ttyname就是我们在18章的那个程序，我们可以如下运行pty程序：
	   $ who
	   sar  :0      Oct  5 18:07
	   sar  pts/0   Oct  5 18:07
	   sar  pts/1   Oct  5 18:07
	   sar  pts/2   Oct  5 18:07
	   sar  pts/3   Oct  5 18:07
	   sar  pts/4   Oct  5 18:07        pts/4 is the highest PTY currently in use
	   $ pty ttyname                    run program in Figure 18.16 from PTY
	   fd 0: /dev/pts/5                 pts/5 is the next available PTY
	   fd 1: /dev/pts/5
	   fd 2: /dev/pts/5
	
	
	（1）utmp文件
	在第6章，我们叙述了utmp文件，这个文件记录了所有当前登陆到一个UNIX系统上面的用户。问题是，一个在伪终端上面运行程序的用户，是否被当做登陆的用户？在远程登陆中，telnetd和rlogind，显然会为在伪终端上面登陆的用户创建一个utmp文件中的条目。然而，如果用户从窗口系统或者某个程序（例如script）中运行shell于伪终端上，是否应当在utmp文件中有对应的条目，却有许多争议。有些系统会记录这些，有些却不会。如果一个系统没有在utmp文件中记录这些，那么who程序就通常不会显示相应的、被使用的伪终端。
	如果utmp文件没有将other用户的写权限打开（这通常被认为是一种安全漏洞），那么任意使用伪终端的应用程序并不能写这个文件。
	
	（2）作业控制交互
	如果我们在pty下面运行一个作业控制shell，那么它会正常地工作。例如：
	    pty ksh
	在pty下面运行Korn shell，我们可以在这个新的shell下面运行这个程序，并且像我们使用登陆shell那样使用作业控制。但是，如果我们如果在pty下面运行一个不是作业控制的交互程序，例如：
	    pty cat
	那么所有的东西会直到我们键入作业控制挂起字符的时候才会正常。在那个时候，作业控制字符被显示成^Z并且被忽略。在早期基于BSD的系统中，cat进程终止，pty进程也终止，然后我们回到原来的shell中去。为了了解究竟发生了什么事情，我们需要对所有的进程，它们的进程组，以及会话进行检查。下面的图就展示了运行pty cat的时候的情况。
	
	                              对于pty cat的进程组和会话
	
	                           session                                      session
	    +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - +   +- - - - - - - -+
	    |  process group                process group              |   | process group |
	    | +- - - - - - -+    +- - - - - - - - - - - - - - - - - +  |   |  +- - - - -+  |
	    | | +---------+ |    | +------------+       +---------+ |  |   |  | +-----+ |  |
	    | | |  login  | |    | |     pty    |       |   pty   | |  |   |  | | cat | |  |
	    | | |  shell  | |    | |    parent  |       |  child  | |  |   |  | |     | |  |
	    | | +---------+ |    | +--|-------^-+       +--|---^--+ |  |   |  | +-|-^-+ |  |
	    | +- - - - - - -+    +- - | - - - -\- - - - - -|- / - - +  |   |  +- -|-|- -+  |
	    +- - - - - - - - - - - - -|- - - - -\- - - - - | / - - - - +   +- - - | | - - -+
	                              |      /---+---------+/                     | |
	                         +----v-----/----+\        |               +------v-|------+
	                         |    terminal   | \       |               |    terminal   |
	                         |line discipline|  \      |               |line discipline|
	                         +----|-----^----+   \     |               +------|-^------+
	                              |     |         \----+---                   | |
	                              |     |              |   \                  | |
	                         +----v-----|----+      +--v----\-+           +---v-|---+
	                         |    terminal   |      |   PTY   |           |   PTY   |
	                         | device driver |      |  master |           |  slave  |
	                         +-------^-------+      +--|----^-+           +---|-^---+
	                                 |                 |    |                 v |
	                                 |                 v    +<----------------+ |
	                                 |                 +----------------------->+
	                            /----v---\
	                           |user at a |
	                           | terminal |
	                            \--------/
	
	当我们键入挂起字符(Control-z)的时候，从pty将终端（在pty父进程之下）切入raw模式起，这个字符会被cat下面的行规则模块识别。但是由于它本身是孤儿进程组，所以内核不会停止这个cat进程(具体需要参见第9章10节)。cat的父进程是pty父进程，但是却属于另外一个会话。
	以前，各种实现对这个情况的处理有所不同。POSIX.1只是说SIGTSTP信号不能发送给进程。从4.3BSD继承过来的系统却发送了SIGKILL信号，这个信号进程甚至不能捕获。4.4BSD中，这个行为改变了，它遵从POSIX.1，4.4BSD不是发送SIGKILL，它会静静地忽略SIGTSTP信号（如果这个信号是默认的行为并且要发送给另外一个孤儿进程组中的进程）。
	当我们使用pty运行一个作业控制shell的时候，通过这个新的shell发起的作业不会是一个孤儿进程组中的成员，因为作业控制shell本身属于同一个会话。这个时候，Control-Z的键入，就会通过shell发送给这个被shell发起的进程，而不是发送给shell本身。
	有一个方法可以避免被pty发起的进程无法处理作业控制信号：为pty添加另外一个命令行标记，告诉它让它自己识别作业控制挂起字符（在pty子进程中），而不是任由这个字符通过其他的行规则。
	
	（3）查看长时间运行的程序的输出
	另外一个通过pty程序进行作业控制交互的例子就是本章第2节的"通过伪终端运行慢输出程序"图所示的例子。如果我们如下运行的程序输出很慢：
	   pty slowout > file.out &
	pty进程会在子进程尝试读取它的标准输入（终端）的时候立即停止。原因就是，这个作业是一个后台作业，当它尝试访问终端的时候会导致作业控制停止。如果我们将标准输入重新定向，一边pty不会尝试从终端进行读取，如下：
	   pty slowout < /dev/null > file.out &
	pty程序会立即停止，因为它在它的标准输入上面读取到一个文件结束符号并且终止。解决这个问题的方法就是使用-i选项，这个选项表示会忽略标准输入的文件结束符号:
	   pty -i slowout < /dev/null > file.out &
	这个标记导致当遇到文件结束符号的时候，pty子进程(前面代码中的loop函数)exit，但是子进程不会告诉父进程它终止了。相反，父进程还是继续将PTY slave的输出拷贝到标准输出（这个例子中的file.out文件）。
	
	（4）script程序
	使用pty程序，我们可以如下通过shell脚本执行script程序:
	    #!/bin/sh
	    pty "${SHELL:-/bin/sh}" | tee typescript
	当我们运行这个shell脚本的时候，我们可以执行ps命令来查看所有进程的关系，下面的途中就详细地列出了这些关系。
	
	                        script的shell脚本的进程组织结构图
	
	                           typescript
	                             file                  -------------
	                              ^                   /             \
	  +-----------+   +----+   +--|--+   +----------+/   +---------+ \    +-----+    +----+
	  |login shell|-->| sh |-->| tee |-->|pty parent|--->|pty child|  --->| ksh |--->| ps |
	  +-----------+   +----+   +-|-^-+   +--|---^---+    +--|---^--+      +-----+    +|--^+
	                             | |  pipe  v    \          /  /                      |  |
	                             | +<-------+     \        /  /                       |  |
	                             |    /------------+------+---                    +---v--|---+
	                         +---v----|-+           \     |                       |  line    |
	                         |   line   |            \   /                        |discipline|
	                         |discipline|             \ /                         +---|--^---+
	                         +---|-^----+              X                              |  |
	                             | |                  / \                             |  |
	                             | |               +-v---\-+                        +-v--|-+
	                           +-v-|-+             |  PTY  |                        | PTY  |
	                           | TTY |             | master|                        |master|
	                           +--^--+             +-|---^-+                        +-|--^-+
	                              |                  |   |                            v  |
	                              |                  v   +<---------------------------+  |
	                              |                  +---------------------------------->+
	                           /--v--\
	                          |  user |
	                           \-----/
	
	在这个例子里面，我们假设SHELL变量是Korn shell(一般来说导致使用/bin/ksh)。如我们前面所提到的那样，script只是拷贝这个新shell(以及它所发起的进程)所输出的内容。但是，当PTY slave上面的行规则模块一般来说打开回显的时候，大多数我们输入的也会写入到typescript文件中去。
	
	（5）运行协作处理进程
	在15章2节中"使用两个管道用于父子进程同步"这个图中，协作处理进程不能使用标准输入输出函数，因为标准输入输出不会引用终端，所以标准输入输出函数将它们看作是全缓冲的。如果我们在pty下面如下代码运行写作处理进程：
	    if (execl("./add2", "add2", (char *)0) < 0)
	而不是：
	    if (execl("./pty", "pty", "-e", "add2", (char *)0) < 0)
	那么程序即使在写作处理进程使用标准输入输出的时候，也会正常工作。
	
	下图展示我们使用伪终端作为协作处理进程的输入输出的时候进程的运行情况。它实际上是对本章第2节的图"使用伪终端来驱动一个协作处理进程"的一个扩展,(为方便起见，我将它也贴在下面了，其实它和前面的图一样)它展示了所有的进程连接和数据流。标记了"driving program"的部分是来自在15章2节中"使用两个管道用于父子进程同步"图的程序，其中的execl如前面所说的进行了修改。
	
	                     使用伪终端来驱动一个协作处理进程(扩展之前)
	                                                            coprocess
	      +-----------+  pipe1    +-------------+            +-------------+
	      |  driving  |---------->|   pseudo    |----------->| stdin       |
	      |  program  |<----------|  terminal   |<-----------| stdout      |
	      +-----------+  pipe2    +-------------+            +-------------+
	
	
	            将伪终端作为协作处理进程的输入输出来运行写作处理进程(扩展后)
	                                                        fork,exec
	                                                 ---------------------\
	     +-------------------+  fork    +---------+ /       +--------+     \    +-----------+
	     |   driving         |--------->|  pty    |/  fork  |  pty   |      \   |   add2    |
	     |       program     |  exec    | parent  |-------->| child  |       -->|(coprocess)|
	     +--|----^----|---^--+          +--|---^--+         +--/---^-+          +---|----^--+
	        |    |    |   |     pipe2      v    \             /    |                |    |
	        |    |    v   +<---------------+     \           /     |                |    |
	        |    |    +---------------------------\---------/----->+                |    |
	        |    |              pipe1              \       /                        |    |
	     +--v----|-------+                          \     /                   +-----v----|----+
	     |    terminal   |                           \   /                    |    terminal   |
	     |line discipline|                            \ /                     |line discipline|
	     +--|----^-------+                             X                      +-----|----^----+
	        |    |                                    / \                           |    |
	        |    |                                   /   \                          |    |
	     +--v----|-------+                       +--v-----\-+                    +--v----|-+
	     |   terminal    |                       |   PTY    |                    |   PTY   |
	     | device driver |                       |  master  |                    |  slave  |
	     +------^--------+                       +--|-----^-+                    +--|----^-+
	            |                                   |     |                         v    |
	       /----v----\                              v     +<------------------------+    |
	      | user at a |                             +----------------------------------->+
	      | terminal  |
	       \---------/
	
	这个例子，展示了pty程序-e选项的需要。pty程序并不是交互运行的，因为它的标准输入没有连接到终端上面。因为对isatty返回为false，前面"pty程序的main函数"里面，交互的标记默认设置为false。也就是说，实际终端上面的行规则部分保持一个回显被打开的canonical模式。通过指定-e选项，我们关闭了PTY slave上面的行规则模块的回显。如果我们没有做这个步骤，我们所键入的就会被两个行规则模块显示两次。
	我们指定-e选项也会关闭termios结构中的ONLCR标记，以组织所有来自协作处理进程的输出被回车或者新行终止。
	在不同的系统上面测试这个例子，也显示了另外一个我们在14章8节中描述readn和writen函数时候暗示的问题。即当文件描述符号引用一个不是普通磁盘文件的时候，通过read返回的数据的数量，会根据实现有所不同。这个使用pty的协作处理进程的例子在还是15章2节中的那个程序里，由于其程序管道中的read函数返回少于一行，所以对read函数跟踪得到的数据结果是无法预料的。解决的方法就是不使用那个程序，但是使用本书中15章练习题第5题中的修改过的程序，这个程序使用了标准输入输出库，并且为两个管道的标准输入输出流设置了行缓冲。通过这样做，fgets函数读取的次数如同请求获取一整个行。15章2节的那个程序中的while循环假设每次向协作处理程序发送一行会导致一行被返回。
	
	（6）通过非交互的方式驱动交互程序
	尽管我们觉得pty可以运行任何协作处理进程（甚至一个协作处理进程是交互的进程），它并不会正常工作。问题是，pty只是仅仅将它的标准输入的内容拷贝到PTY，以及将PTY的所有内容拷贝到它的标准输出，却不会检查它究竟发送了什么以及获取了什么。
	作为一个例子，我们可以在pty下面运行telnet命令直接与远程主机交互：
	    pty telnet 192.168.1.3
	这样做，并不比直接键入telnet 192.168.1.3好多少，但是我们可能想要telnet程序从一个脚本中运行，并且可能会检测远程主机上面的一些条件。如果文件telnet.cmd包含这四行：
	    sar
	    passwd
	    uptime
	    exit
	其中第一行远程登陆的用户名称，第二行是密码，第三行是我们想要运行的命令，第四行是终止会话的行。但是如果我们如下运行这个脚本：
	    pty -i < telnet.cmd telnet 192.168.1.3
	它并没有如我们所想的方式工作。所发生的事情应就是，文件telnet.cmd中的内容在开始提示我们输入用户名称和密码之前就被发送到远程主机上面。当关闭回显读取密码的时候，login程序使用tcsetattr选项，导致所有已经被排队的数据被丢弃。因此，我们发送的数据被丢弃了。
	当我们交互运行telnet程序的时候，我们等待远程主机提示密码，然后我们才开始输入。但是pty程序不知道需要这样做，所以导致前面所说的那个现象。因此，需要一个更复杂的程序来实现这个功能，例如expect程序，通过这个程序才能正常地从一个脚本中以非交互的方式来运行一个交互的程序。
	
	即使运行前面我们展示的"使用伪终端来驱动一个协作处理进程(扩展之前)"对应的程序，也没有什么作用。因为，程序假设每向一个管道写一行，也会在另外一个管道产生同样的一行。在交互处理程序中，一行输入可能会产生许多行输出，并且，前面途中的程序经常会在读取之前向协作处理进程发送一行数据。这样，当我们想要在发送之前从协作处理进程中读取一些数据的时候，就不能正常地工作了。
	这里，有一些方法可以从一个脚本来启动交互处理程序。我们可以添加一个命令语言，以及给pty程序添加一个解释器，但是这样的话那个语言本身可能就比pty程序复杂多了。另外一个方法就是，采用一个命令行语言，然后使用pty_fork函数来发起交互程序。这也是expect程序所做的事情。
	我们会采用不同的路径，并且添加一个-d选项，允许pty程序连接到驱动的进程的输入和输出。进程的标准输出是pty的标准输入，反之同样。这和协作处理进程类似，但是在pty的"另外一端"，结构和"将伪终端作为协作处理进程的输入输出来运行写作处理进程(扩展后)"是几乎一样的。但是在当前的情况中，pty对驱动的进程做了一步fork和exec的操作。并且，不是使用两个半双工的管道，我们将要在pty和驱动的进程之间，使用一个全双工的管道。
	下面的代码展示了do_driver函数的源代码，这个函数会在指定-d选项的时候，被pty的main函数调用(参见前面"pty程序的main函数")。
	
	（7）pty程序的do_driver函数
	#include "apue.h"
	void do_driver(char *driver)
	{
	    pid_t   child;
	    int     pipe[2];
	
	    /*
	     * Create a stream pipe to communicate with the driver.
	     */
	    if (s_pipe(pipe) < 0)
	        err_sys("can't create stream pipe");
	
	    if ((child = fork()) < 0) {
	        err_sys("fork error");
	    } else if (child == 0) {        /* child */
	        close(pipe[1]);
	
	        /* stdin for driver */
	        if (dup2(pipe[0], STDIN_FILENO) != STDIN_FILENO)
	            err_sys("dup2 error to stdin");
	
	        /* stdout for driver */
	        if (dup2(pipe[0], STDOUT_FILENO) != STDOUT_FILENO)
	            err_sys("dup2 error to stdout");
	        if (pipe[0] != STDIN_FILENO && pipe[0] != STDOUT_FILENO)
	            close(pipe[0]);
	
	        /* leave stderr for driver alone */
	        execlp(driver, driver, (char *)0);
	        err_sys("execlp error for: %s", driver);
	    }
	    close(pipe[0]);     /* parent */
	    if (dup2(pipe[1], STDIN_FILENO) != STDIN_FILENO)
	        err_sys("dup2 error to stdin");
	    if (dup2(pipe[1], STDOUT_FILENO) != STDOUT_FILENO)
	        err_sys("dup2 error to stdout");
	    if (pipe[1] != STDIN_FILENO && pipe[1] != STDOUT_FILENO)
	        close(pipe[1]);
	
	    /*
	     * Parent returns, but with stdin and stdout connected
	     * to the driver.
	     */
	}
	
	通过我们自己写的被pty调用的driver程序，我们可以以任何需要的方式来驱动交互程序。即使它的标准输入和标准输出连接到pty上面，driver进程也还是可以通过读写/dev/tty来和用户进行交互。这个方案还是不如expect程序通用，但是它只通过不到50行的代码，就为pty程序添加了一个有用的选项。

参考：
http://book.chinaunix.net/special/ebook/addisonWesley/APUE2/0201433079/ch19lev1sec6.html



