Linux下C语言编程入门-18关于多路复用I/O
十八、关于多路复用I/O
=======================
为了解决创建子进程带来的系统资源消耗,人们又想出了多路复用 I/O 模型.
一般的来说当我们在向文件读写时,进程有可能在读写出阻塞.如果我们不希望阻塞,我们的一个选择是用select系统调用. 只要我们设置好select的各个参数,那么当文件可以读写的时候select回"通知"我们 说可以读写了. 在我们调用select时进程会一直阻塞直到以下的一种情况发生. 1)有文件可以读.2)有文件可以写.3)超时所设置的时间到.

1,相关函数
-------
int select(int nfds,fd_set *readfds,fd_set *writefds,fd_set *except fds,struct timeval *timeout)
void FD_SET(int fd,fd_set *fdset)
void FD_CLR(int fd,fd_set *fdset)
void FD_ZERO(fd_set *fdset)
int FD_ISSET(int fd,fd_set *fdset)

select函数监视多个文件描述符，直到其中之一准备好了可以读写。
readfds 所有要读的文件文件描述符的集合，空表示不监视
writefds 所有要的写文件文件描述符的集合，空表示不监视
exceptfds 其他的服要向我们通知的文件描述符，空表示不监视
timeout 超时设置.设置为空表示没有延迟，意思是可以无限的阻塞。(man 2 select可以看到其具体的结构定义)
nfds 所有我们监控的文件描述符中(数字)最大的那一个加 1

FD_SET函数将 fd 加入到 fdset。

FD_CLR函数将 fd 从 fdset 里面清除。

FD_ZERO函数从 fdset 中清除所有的文件描述符。

FD_ISSET函数判断 fd 是否在 fdset 集合中。

2,举例
-------
(例子可能有点错误我还不太懂?????????)
int use_select(int *readfd,int n)
{
	fd_set my_readfd;
	int maxfd;
	int i;
	maxfd=readfd[0];
	for(i=1;i<n;i++)
		if(readfd>;maxfd) maxfd=readfd;
	while(1)
	{
		/* 将所有的文件描述符加入 */
		FD_ZERO(&my_readfd);
		for(i=0;i<n;i++)
			FD_SET(readfd,*my_readfd);
		/* 进程阻塞 */
		select(maxfd+1,& my_readfd,NULL,NULL,NULL);
		/* 有东西可以读了 */
		for(i=0;i<n;i++)
			if(FD_ISSET(readfd,&my_readfd))
			{
				/* 原来是我可以读了 */
				we_read(readfd);
			}
	}
}

由上可见，使用 select 后我们的服务器程序就变成了如下:
初始化(socket,bind,listen);
while(1)
{
	设置监听读写文件描述符(FD_*);
	调用 select;
	如果是倾听套接字就绪,说明一个新的连接请求建立
	{
		建立连接(accept);
		加入到监听文件描述符中去;
	}
	否则说明是一个已经连接过的描述符
	{
		进行操作(read 或者 write);
	}
}
多路复用 I/O 可以解决资源限制的问题.着模型实际上是将 UDP 循环模型用在了 TCP 上面. 有可能带来一些问题，比如：由于服务器依次处理客户的请求,所以可能会导致有的客户会等待很久.
