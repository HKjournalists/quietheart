Linux下C语言编程入门-16关于高级套接字函数
十六、关于高级套接字函数
=======================
1,相关函数
-------
int recv(int sockfd,void *buf,int len,int flags)
int send(int sockfd,void *buf,int len,int flags)
int recvfrom(int sockfd,void *buf,int len,unsigned int flags,struct sockaddr * from int *fromlen)
int sendto(int sockfd,const void *msg,int len,unsigned int flags,struct sockaddr *to int tolen)
int recvmsg(int sockfd,struct msghdr *msg,int flags)
int sendmsg(int sockfd,struct msghdr *msg,int flags)
int shutdown(int sockfd,int howto)

这里，
recv函数类似read不过提供了第四个参数，含义见前面.
send函数类似write不过提供了第四个参数，含义见前面.
recvfrom函数一般用在UDP前面有描述.
sendto函数一般用在UDP前面有描述.
recvmsg和sendmsg这两个函数实现了前面所有读写函数的功能
shutdown函数可以提供选择性的关闭，不像close会把读写通道全部关闭。
TCP 连接是双向的(是可读写的),当我们使用 close 时,会把读写通道都关闭,有时侯我们希望只关闭一个方向,这个时候我们可以使用 shutdown.针对不同的 howto,系统回采取不同的关闭方式.
参数howto意义：
howto=0 这个时候系统会关闭读通道.但是可以继续往接字描述符写.
howto=1 关闭写通道,和上面相反,着时候就只可以读了.
howto=2 关闭读写通道,和 close 一样 在多进程程序里面,如果有几个子进程共享一个套接字时,如果我们使用 shutdown, 那么所有的子进程都不能够操作了,这个时候我们只能够使用 close 来关闭子进程的套接字描述符.

2,相关结构
-------
struct msghdr
{
	void *msg_name;/*当套接字是非面向连接时(UDP),它们存储接收和发送方的地址，是一个指向 struct sockaddr 的指针。套接字面向连接时为NULL*/
	int msg_namelen;/*当套接字是非面向连接时(UDP),它们存储接收和发送方的地址,是上面结构的长度.套接字面向连接时为0*/
	struct iovec *msg_iov;/*一个结构指针，见后面*/
	int msg_iovlen;/*上面结构数组的大小(数目还是单个元素的大小?????????)*/
	void *msg_control;/*用来接收和发送控制数据*/
	int msg_controllen;/*用来接收和发送控制数据*/
	int msg_flags;/*与recv和send的一样，见下面描述*/
}；
关于msg_flags,如果为0则和read，write是一样的操作其它取值如下（可以man）：
MSG_DONTROUTE: send 函数使用的标志.这个标志告诉 IP 协议.目的主机在本地网络上是面,没有必要查找路由表.这个标志一般用网络诊断和路由程序里面.
MSG_OOB:表示可以接收和发送带外的数据.关于带外数据我们以后会解释的.
MSG_PEEK: recv 函数的使用标志,表示只是从系统缓冲区中读取内容,而不清楚系统缓冲是区的内容.这样下次读的时候,仍然是一样的内容.一般在有多个进程读写数据时可以使用这个标志.
MSG_WAITALL 是 recv 函数的使用标志,表示等到所有的信息到达时才返回.使用这个标志的时候 recv 回一直阻塞,直到指定的条件满足,或者是发生了错误. 1)当读到了指定的字节时,函数正常返回.返回值等于 len 2)当读到了文件的结尾时,函数正常返回.返回值小于len 3)当操作发生错误时,返回-1,且设置错误为相应的错误号(errno)。

struct iovec
{
	void *iov_base; /* 缓冲区开始的地址 */
	size_t iov_len; /* 缓冲区的长度 */
}


3,举例
-------
例子暂时省略以后有机会再举。*********


