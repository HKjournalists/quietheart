Linux下C语言编程入门-13关于线程
十三、关于线程
=======================
这里说的不全，可以参见如下网址:
http://docs.huihoo.com/joyfire.net/11.html#I250

1,相关函数
-------
int pthread_create(pthread_t *thread,pthread_attr_t *attr,
			  void *(*start_routine)(void *),void *arg);
pthread_exit(...);
pthread_delay_np(...);

pthread_create函数创建一个新的线程。其中,thread保存线程的线程变量;attr线程属性;start_routine当线程执行时要调用的函数;start_routine函数的参数.
线程属性只指明了需要使用的最小的堆栈大小。在以后的程序中，线程的属性可以指定其他的值，但现在大部分的程序可以使用缺省值。

其它函数略过不说了,以后可能更新。*********

2,举例
-------
/*创建线程*/
void print_message_function( void *ptr );
main ( )
{
	pthread_t thread1, thread2;
	char *message1 = "Hello”;
	char *message2 = "Wo r l d " ;
	/*注意各个参数的调用方法*/
	pthread_create( &thread1, pthread_attr_default,
			(void *) &print_message_function, (void *) message1);

	/*在父线程中插入一个延迟程序，给子线程足够的时间完成打印的调用，可惜不行，见后面sleep*/
	sleep (10) ;
	pthread_create(&thread2, pthread_attr_default,
			(void *) &print_message_function, (void *) message2);
	/*sleep不行的原因：
	  1）依靠时间的延迟执行同步是不可靠的
	  2）sleep和exit一样和进程有关。当线程调用sleep时，整个的进程都处于睡眠状态，也就是说，所有的三个线程都进入睡眠状态。
	  如果实在延迟，应该用pthread_delay_np
	 */
	sleep ( 10 ) ;

	/*exit将会退出进程，同时释放任务，它会结束所有的线程。任何线程(不论是父线程或者子线程)调用exit 都会终止所有其他线程。
	  如果只退出线程，应该用pthread_exit*/
	exit (0) ;
}
void print_message_function( void *ptr )
{
	char *message;
	message = (char *) ptr;
	printf("%s", message);
	pthread_exit(0) ;
}
/*让一个线程睡眠两秒钟应该如下：外部还是线程内部?????????*/
struct timespec delay;
delay.tv_sec = 2;
delay.tv_nsec = 0;
pthread_delay_np( &delay );
