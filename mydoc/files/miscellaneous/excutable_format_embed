嵌入式系统可执行文件格式 映像格式(uboot)
2010-07-19 16:11
UBOOT编译映像格式(uboot)
UBOOT编译完成后，可以得到u-boot各种格式的映像文件和符号表
u-boot.bin:      u-boot映像原始的二进制格式
u-boot:            u-boot映像的ELF格式
u-boot.srec:     u-boot映像的S-Record格式
u-boot.map:    u-boot映像的符号表

u-boot的3种映像格式都可以烧写到Flash中，但需要看加载器能否识别这些格式。一般u-boot.bin最为常用，直接按照二进制格式下载，并 且按照绝对地址烧写到Flash中就可以了。u-boot和u-boot.srec格式映像都自带定位信息

嵌入式系统可执行文件的格式
调试器需要的调试信息与一些下载时需要的一些信息。不同的嵌入式环境中，其组织可执行文件的格式也不相同，主要有以下几种：   ELF文件格式、S-record文件格式、HEX文件格式、bin文件格式

BIN文件格式
原始的二进制格式，内部没有地址标记，直接按照二进制格式下载，并且按照绝对地址烧写到Flash中就可以启动了，而如果下载运行，则下载到编译时的地址即可。
ELF文件格式（Executable and linking format）

Executable and linking format(ELF)文件是Linux系统 下的一种常用、可移植目标文件(object file)格式，它有三种主要类型：

可重定位文件（Relocatable File）：包含适合于与其他目标文件链接来创建可执行文件或者共享目标文件的代码和数据。

可执行文件（Executable File）：包含适合于执行的一个程序，此文件规定了exec() 如何创建一个程序的进程映像。

共享目标文件（Shared Object File）：包含可在两种上下文中链接的代码和数据。首先链接编辑器可以将它和其它可重定位文件和共享目标文件一起处理，生成另外一个目标文件。其次，动态链接器（Dynamic Linker）可能将它与某个可执行文件以及其它共享目标一起组合，创建进程映像。
S-Record文件格式

S-Record文件遵循Motorola制定的格式规范，是一种标准的、可打印格式的文件。 S-Record文件是通过对链接器生成的目标程序或 数据进行编码生成的，适用于在计算机平台间传送，也可以在编辑后用于交叉平台间的传送。S-Record文件编码简单，可以通过IDE下载，但无法在线实时调试。S-Record文件是由多条记录组成的，每条记录都是由5个字段组成的ASCII字符串，格式如下所示。
l         记录类型：由两个字符组成，描述了该条记录的可能类型（S0, S1, S2, S3, S5, S7, S8, or S9）。

l         数据长度：是对应于2 byte十六进制数的一对字符，表示该条记录后续字符对的个数；

l         地址：由4，6或者8个字符组成，也是由十六进制值翻译得到的字符，给出数据字段将存放在存储器中的地址；

l         数据：由每2 byte十六进制值翻译得到的成对的字符,大小为0-64，这些十六进制数值可能是存放在存储器中的数据，或者是描述信息；

l         校验和：它们所对应的十六进制数值是根据除记录类型之外的其他字段字符成对累加之和求反所得；

l         换行符：每条记录都由换行符终止。针对不同的目标器件，可能每条记录的结束符不尽相同，设计中用传输程序来提供一致的换行符。

所有的S-Record文件都是以类型为S0的记录作为首条记录，这条记录在数据字段中给出文件的信息，包括路径、版本号等，这些信息是供阅读的， 将不被存放到存储器中。S-Record文件的中间记录可能是类型为S1、S2或S3的记录，其地址字段分别对应2、3、4 byte地址，因而主要区别在于寻址空间的不同。S-Record文件以S7、S8或S9类型的记录作为末条记录，除了地址字段长度不同外，它们都给出了 程序执行的起始地址，并都不含数据字段。
HEX文件格式
Intel HEX文件是记录文本行的ASCII文本文件，在Intel HEX文件中,每一行是一个HEX记录，由十六进制数组成的机器码或者数据常量。Intel HEX文件经常被用于将程序或数据传输 存储到ROM、EPROM。大多数编程器和模拟器使用Intel HEX文件。

    一个Intel HEX文件可以包含任意多的十六进制记录，每条记录有五个域，下面是一个记录的格式， :LLaaaatt[dd...]cc 每一组字母是独立的一域，每一个字母是一个十六进制数字，每一域至少由两个十六进制数字组成，下面是字节的描述： :冒号：它是每一条Intel HEX记录的开始。 LL是这条记录的长度域，他表示数据(dd)的字节数目。 aaaa是地址域：他表示数据的起始地址。 如果是数据记录,这表示将要烧录的这条记录中的数据在EPROM/FLASH中的偏移地址，对于不支持扩展段地址和扩展线性地址的，如89C51,这就是 此条记录的起始地址。 tt这个域表示这条HEX记录的类型，他有可能是下面这几种类型： 00：数据记录 01：文件结束记录 02：扩展段地址记录 04：扩展线性地址记录 dd是数据域：表示一个字节的数据。一个记录可能有多个数据字节，字节数目可以查看LL域的说明。 cc是效验和域：表示记录的效验和，计算方法是将本条记录冒号开始的所有字母对（不包括本效验字和冒号）所表示的十六进制数字都加起来，然后模除256得 到的余数，最后求出余数的补码即是本效验字节cc。

Intel HEX文件由若干个数据记录组成,一个数据记录以一个回车和一个换行结束，（回车为0x0d换行为0x0a）。

扩展线性地址记录(HEX386) ： 扩展线性地址记录也可称为32位地址记录和HEX386记录，这个纪录包含高16(16-31位)位数据地址，这种扩展的线性记录总是有两个字节数据。当 一个扩展线性地址记录被读到后，扩展线性地址记录的数据区域将被保存并应用到后面从Intel HEX文件中读出的记录，这个扩展线性记录一直有效, 直到读到下一个扩展线性记录。 文件结束记录(EOF) ：     一个Intel HEX文件必须有一个文件结束记录，这个记录的类型域必须是01，一个EOF记录总是这样: :00000001FF，其中：00是记录中数据字节的数目，0000这个地址对于EOF记录来说无任何意义，01记录类型是01(文件结束记录标 示)，FF是效验和。计算如下01h + NOT(00h + 00h + 00h + 01h)。
可执行文件格式的差别

a)      HEX文件是包括地址信息的，而BIN文件格式只包括了数据本身，在烧写或下载HEX文件的时候，一般都不需要用户指定地址，因为HEX文件内部的信息已经包括了地址。而烧写BIN文件的时候，用户是一定需要指定地址信息的。

b)      BIN文件格式 对二进制文件而言，其实没有”格式”。文件只是包括了纯粹的二进制数据。

c)       HEX文件格式 HEX文件都是由记录（RECORD）组成的。在HEX文件里面，每一行代表一个记录。记录类型包括：记录数据域，文件结束域，扩展线性地址的记录，扩展 段地址的记录。在上面的后2种记录，都是用来提供地址信息的。每次碰到这2个记录的时候，都可以根据记录计算出一个“基”地址。对于后面的数据记录，计算 地址的时候，都是以这些“基”地址为基础的。

d)       AXF是Arm特有的文件格式，它除了包含bin文件外，还额外包括了许多其他调试信息。在下载到目标板的时候，烧入ROM还是bin文件，额外的调试信息会被去掉

一般来说，可以由elf文件转化为其它两种文件，hex也可以直接转换为bin文件，但是bin要转 化为hex文件必须要给定一个基地址。而hex和bin不能转化为elf文件，因为elf的信息量要大。另外还有一种ads的调试文件axf，它可以用以 下命令fromelf -nodebug xx.axf -bin xx.bin转化为bin文件。

摘自：嵌入式系统可执行文件格式

http://blog.csdn.net/gogofly_lee/archive/2008/07/10/2636257.aspx
http://blog.csdn.net/gogofly_lee/article/details/2636257
