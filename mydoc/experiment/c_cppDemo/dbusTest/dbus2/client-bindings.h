/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_ServiceName
#define DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_ServiceName

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_ServiceName_echo_string (DBusGProxy *proxy, const char * IN_original, char ** OUT_echo, GError **error)

{
  return dbus_g_proxy_call (proxy, "EchoString", error, G_TYPE_STRING, IN_original, G_TYPE_INVALID, G_TYPE_STRING, OUT_echo, G_TYPE_INVALID);
}

typedef void (*org_gnome_ServiceName_echo_string_reply) (DBusGProxy *proxy, char * OUT_echo, GError *error, gpointer userdata);

static void
org_gnome_ServiceName_echo_string_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_echo;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_echo, G_TYPE_INVALID);
  (*(org_gnome_ServiceName_echo_string_reply)data->cb) (proxy, OUT_echo, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_ServiceName_echo_string_async (DBusGProxy *proxy, const char * IN_original, org_gnome_ServiceName_echo_string_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "EchoString", org_gnome_ServiceName_echo_string_async_callback, stuff, g_free, G_TYPE_STRING, IN_original, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_ServiceName */

G_END_DECLS
