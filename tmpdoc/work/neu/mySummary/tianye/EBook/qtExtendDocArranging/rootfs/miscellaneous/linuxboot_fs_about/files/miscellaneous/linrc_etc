参考：http://linux.chinaunix.net/techdoc/net/2008/12/18/1053772.shtml
主題: 請問在busybox 中 linuxrc 與 /sbin/init 的不同處
linuxrc 是 busybox make install 產生出來的
/sbin/init 也是busybox 用來初始開機的程式
我分別用來開機 都可正常運作
那請問兩者的差別在哪裡  還是這兩個東西其實都是一樣的 ^^"

以下為摘自linux kernel Documentation應該可以解決你的疑問。
When using initrd, the system typically boots as follows:
  1) the boot loader loads the kernel and the initial RAM disk
  2) the kernel converts initrd into a "normal" RAM disk and
     frees the memory used by initrd
  3) initrd is mounted read-write as root
  4) /linuxrc is executed (this can be any valid executable, including
     shell scripts; it is run with uid 0 and can do basically everything
     init can do)
  5) linuxrc mounts the "real" root file system
  6) linuxrc places the root file system at the root directory using the
     pivot_root system call
  7) the usual boot sequence (e.g. invocation of /sbin/init) is performed
     on the root file system
  

the initrd file system is removed



linuxrc常见错误
2008年09月04日 星期四 下午 04:16
1>   linuxrc不具备可执行属性
2>   linuxrc的解释shell不在首行
3>   linuxrc的解释shell不存在
一般都出不了上面三个原因.
linuxrc脚本
kernel启动后，执行/root_china/linuxrc脚本文件，接下来执行/root_china/usr/etc/rc.local脚本文件。这两个文
件我以前没去管是什么意思，起到什么作用，直到今天。
/root_china/linuxrc:
#!/bin/sh
echo "mount /etc as ramfs"
/bin/mont -n -t ramfs ramfs /etc //将/etc目录mount成可写的ramfs文件系统
/bin/cp -a /mnt/etc/* /etc        //将/mnt/etc目录下的文件拷贝到/etc目录下
echo "re-create the /etc/mtab entries"
#re-create the /etc/mtab entries
/bin/mount -f -t cramfs -o remount,ro /dev/mtdblock/2 / //将/dev/mtdblock/2 mount成根文件系统
/bin/mount -f -t ramfs ramfs /etc
exec /sbin/init      //执行脚本档 /usr/etc/rc.local
1. /bin/mount -n -t ramfs ramfs /etc
这句话的作用加载一个ramfs作为/etc目录。这样/etc就是一个可写目录。看这个脚本，得出根文件系统是一个
cramfs（只读可压缩文件系统），而/etc作为系统运行配置文件的存放地点，可能会写一些运行状态在这里，linuxrc第一件事情就是将一个 ramfs mount到/etc只读目录中，使得/etc/目录可写，指定参数-n的目的是告诉mount不要写/etc/mtab（这个文件存放当前系统 mount了的所有文件系统）。因为现在/etc/目录还是只读，所以这次mount不要写这个文件，否则会失败。ramfs在哪里？在 /etc/fstab文件中应该有ramfs一项，mount会去找这项，如果没有，mount会失败。后面就执行不下去。
2. /bin/cp -a /mnt/etc/* /etc
/etc成为可写目录后，将所有/mnt/etc中的配置文件拷贝到/etc/中，这说明ramfs可能是一个空的ramfs，没有配置文件，或者配置文件比较老。 同时也说明这个系统是一个只读系统，每次系统运行中写入的配置不会保留。
将以前mount的那些信息重新写到/etc/mtab中，命令就是下面这些。
3. /bin/mount -f -t cramfs -o remount,ro /dev/bon/2 /
/bin/mount -f -t ramfs ramfs /etc
这些命令只是将这些mount信息写到/etc/mtab中，不会实际去mount这些block device，说明你的根文件系统依然是以前的那个/dev/bon/2
4. exec /sbin/init
执行根文件系统中的init执行程序，使其成为1号进程。shell正式运行


linux启动过程详解
2008-01-12 00:43
这几天看了很多文档,算是对linux的启动过程有了比较细致的了解.
    网上有很多文章谈到这方面的内容,但总觉得没有一篇完全的解析linux启动的
细节,下面是我小弟在学习的过程中总结出来的一些东东.这个是完整的linux启动过程,
不涉及内核,但是我觉得比较详细哦.
     (由于本人比较懒,这一段是从网上抄的)
    机器加电启动后,BIOS开始检测系统参数,如内存的大小,日期和时间,磁盘
设备以及这些磁盘设备用来引导的顺序,通常情况下，BIOS都是被配置成首先检查
软驱或者光驱（或两者都检查），然后再尝试从硬盘引导。如果在这些可移动的设
备中，没有找到可引导的介质，那么BIOS通常是转向第一块硬盘最初的几个扇区，
寻找用于装载操作系统的指令。装载操作系统的这个程序就是boot loader.
    linux里面的boot loader通常是lilo或者grub,从Red Hat Linux 7.2起，GRUB(
GRand Unified Bootloader)取代LILO成为了默认的启动装载程序。那么启动的时候
grub是如何被载入的呢?
    grub有几个重要的文件,stage1,stage2,有的时候需要stage1.5.这些文件一般都
在/boot/grub文件夹下面.grub被载入通常包括以下几个步骤:
1. 装载基本的引导装载程序(stage1),stage1很小,网上说是512字节,但是在我的系统上
用 du -b /boot/grub/stage1 显示的是1024个字节,不知道是不是grub版本不同的
缘故还是我理解有误.stage1通常位于主引导扇区里面,对于硬盘就是MBR了,stage1的
主要功能就是装载第二引导程序(stage2).这主要是归结于在主引导扇区中没有足够的
空间用于其他东西了,我用的是grub 0.93,stage2文件的大小是 107520 bit.
2. 装载第二引导装载程序(stage2),这第二引导装载程序实际上是引出更高级的功能,　
以允许用户装载入一个特定的操作系统。在GRUB中，这步是让用户显示一个菜单或
是输入命令。由于stage2很大,所以它一般位于文件系统之中(通常是boot所在的根
分区).
上面还提到了stage1.5这个文件,它的作用是什么呢? 你到/boot/grub目录下看看,
fat_stage_1.5 e2fs_stage_1.5 xfs_stage_1.5等等,很容易猜想stage1.5和文件系统
有关系.有时候基本引导装载程序(stage1)不能识别stage2所在的文件系统分区,那么这
时候就需要stage1.5来连接stage1和stage2了.因此对于不同的文件系统就会有不同的
stage1.5.但是对于grub 0.93好像stage1.5并不是很重要,因为我试过了,在没有stage1.5
的情况下, 我把stage1安装在软盘的引导扇区内,然后把stage2放在格式化成ext2或者
fat格式的软盘内,启动的时候照常引导,并不需要e2fs_stage_1.5或者fat_stage_1.5.
下面是我的试验:
    #mkfs.ext2 /dev/fd0
    #mount -t ext2 /dev/fd0 /mnt/floppy
    #cd /mnt/floppy
    #mkdir boot
    #cd boot
    #mkdir grub (以上三步可用mkdir -p boot/grub命令完成)
    #cd grub
    #cp /boot/grub/{stage1,stage2,grub.conf} ./
    #cd; umount /mnt/floppy
    以上几步把软盘格式化成ext2格式,然后把stage1,stage2,grub.conf这几个启动的
时候必须的文件拷贝到软盘的指定目录下.下面安装grub到软盘上.
   #grub (进入grub环境)
   grub> install (fd0)/boot/grub/stage1 (fd0) (fd0)/boot/grub/stage2
p (fd0)/boot/grub/grub.conf
   以上这条命令也可以用下面的两句代替
   grub>root (fd0)    #grub的根目录所在的分区
   grub>setup (fd0)   #这一步就相当于上面的install命令
   我在这里解释一下
    install (fd0)/boot/grub/stage1 (fd0) (fd0)/boot/grub/stage2 p
(fd0)/boot/grub/grub.conf 这条命令.
install
   告诉GRUB将(fd0)/boot/grub/grub/stage1
   安装到软驱的引导扇区(fd0).
(fd0)/boot/grub/stage2
   告诉grub stage2这个文件所在的位置.
p 参数后面跟着(fd0)/boot/grub/grub.conf 告诉grub的配置文件所在的位置.
    好了,让BIOS从软驱启动,试一下,没有e2fs_stage_1.5文件照样能够进入系统.
其实这就是一个小小的启动盘啊.(了解了grub的运行原理,就简单多了^_^)
3. 现在我们已经到grub的开机选单这一步了,接下来grub所需要做的就是装载在一个特
定分区上的操作系统，如linux内核。一旦GRUB从它的命令行或者配置文件中，接到开始
操作系统的正确指令，它就寻找必要的引导文件，然后把机器的控制权移交给操作系统.
     由于篇幅有限,避免冗长,grub的命令我就不多说了,网上很有多的资料,一个典型
完整的引导linux的命令如下:
     title 51base
           root(hd0,0)
           kernel /bzImage ro root=/dev/ram0
           initrd /initrd.img
     这里有必要注意一下几个问题:
     (1)grub的磁盘以及分区的命名方式和linux有所区别,第一个磁盘是从0开始,第一
个分区也是从0开始.譬如第一个硬盘的第5分区在linux下面是/dev/hda5 ,而在grub里面
是(hd0,4).再如/dev/fd0在grub里面是(fd0,0).(最后一句如有错误望提醒)
     (2)不管是IDE硬盘hda,hdb还是SCSI硬盘sda,sdb在grub里面都是以hd方式命名.
譬如虚拟机里面的/dev/sda2在grub里面是(hd0,1),再如/dev/hdb7在grub里面以(hd1,6)
命名.
     (3)要搞清楚上面两个root的关系,root (hd0,0)中的root是grub命令,它用来指定
boot所在的分区作为grub的根目录.而root=/dev/ram0是kernel的参数,它告诉操作系统
内核加载完毕之后,真实的文件系统所在的设备.要注意grub的根目录和文件系统的根
目录的区别.
     再回到上面的几行命令.
     kernel命令用来指定内核所在的位置,"/"代表(hd0,0),也就是grub的根目录
     initrd命令用来指定初始化ram的img文件所在位置.
    grub载入内核bzImage并展开到指定位置(应该是0x100000这个地方),同时载入
initrd.img到内存(不知道是什么地方).
ps:
    grub的任务至此就结束了,下面grub将机器的控制权转交给操作系统(linux).
   操作系统接到控制权之后,开始start_kernel,接着内核将initrd.img展开到/dev/ram0
为临时根文件系统,执行里面的linuxrc文件.
    P.这里有必要说一下initrd的作用特别是它里面的核心文件linuxrc的作用.
   initrd是inital ram disk的宿写.
   当存在initrd的时候,机器启动的过程大概是以下几个步骤(当initrd这一行用
noinitrd 命令代替后,就不存在initrd了)
    1)boot loader(grub)加载内核和initrd.img
    2)内核将压缩的initrd.img解压成正常的ram disk并且释放initrd所占的内存空间
    3)initrd作为根目录以读写方式被挂载
    4)initrd里面的文件linuxrc被执行
    5)linuxrc挂载新的文件系统
    6)linuxrc使用pivot_root系统调用指定新的根目录并将现有的根目录place到指定
位置.
    7)在新的文件系统下正式init
    8)initrd被卸载.
    为了便于理解,我将red hat linnux9 里面的initrd-2.4.20-8.img拿出来分析一下.
    这其实是一个压缩了的文件,是以gz结尾的.
[root@localhost root]#cp /boot/initrd-2.4.20-8.img /mnt/initrd-2.4.20-8.gz
[root@localhost root]#gunzip /mnt/initrd-2.4.20-8.gz
[root@localhost root]#mount -o loop /mnt/initrd-2.4.20-8 /mnt/ram
[root@localhost root]#cd /mnt/ram
[root@localhost ram]#ls
bin dev etc lib linuxrc loopfs proc sbin sysroot
[root@localhost ram]#ls bin
insmod modprobe nash
[root@localhost ram]#ls lib
Buslogic.o ext3.o jbd.o scsi_mod.o   sd_mod.o
[root@localhost ram]ls dev
console null ram systty tty1 tty2 tty3 tty4
sbin目录是指向bin目录的一个连接,其他目录是空的.
[root@localhost ram]cat linuxrc
#!/bin/nash
1.echo "Loading scsi_mod.o module"
2.insmod /lib/scsi_mod.o
3.echo "Loading sd_mod.o module"
4.insmod /lib/sd_mod.o
5.echo "Loading BusLogic.o module"
6.insmod /lib/BusLogic.o
7.echo "Loading jbd.o module"
8.insmod /lib/jbd.o
9.echo "Loading ext3.o module"
10.insmod /lib/ext3.o
11.echo Mounting /proc filesystem
12.mount -t proc /proc /proc
13.echo Creating block devices
14.mkdevices /dev
15.echo Creating root device
16.mkrootdev /dev/root
17.echo 0x0100 > /proc/sys/kernel/real-root-dev
18.echo Mounting root filesystem
19.mount -o defaults --ro -t ext3 /dev/root /sysroot
20.pivot_root /sysroot /sysroot/initrd
21.umount /initrd/proc
上面的编号是我为了下面好说明加上去的.
首先我们必须注意的是这里使用的shell是nash而不是bash,nash是专门为linuxrc可执行
脚本设计的,因此你有必要看一看nash的man文档.
1-10行是加载一些必要的模快.11-12行加载proc内核文件系统,13-14行利用nash内建的
命令mkdevices创建块设备,mkdevices是根据/proc/partitions文件创建里面列出的所有
块设备.15-16行利用nash内建的命令mkrootdev,mkrootdev使它后面的参数/dev/root成
为一个块节点从而使得根分区设备被挂载,其中根分区设备由grub.conf里面的kernel命
令后面所带的参数root=决定,如果root=参数没有被指定,/proc/sys/kernel/real-root-
dev文件将提供根分区设备号.17行将数字256写入到后面的文件里面去.18-19行挂载根文
件系统到/sysroot目录下,/dev/root里面的内容就是root=参数所指定的设备里面的内容
20行调用pivot_root改变根目录所在地并place旧的根目录到指定的位置.21行卸载旧的
根目录里面的proc内核文件系统.
从这里面我们总结一下linuxrc的作用: (参考/usr/src/linux-2.4/Documenta
tion/initrd.txt文档)
    2)/linuxrc文件决定在挂载真正的文件系统之前所需完成的事情(譬如加载必要的网
络驱动或者加载ext3文件系统).
    3)/linuxrc加载必要的模块.
    4)/linuxrc挂载根文件系统
    5)/linuxrc调用pivot_root来改变根目录
    关于initrd的用途可以查考上面提到的文档,想知道linux系统是如何安装的吗?那里
面由答案.
    既然linuxrc的主要目的是加载模快用的,那如果我们的内核没有动态的模块而所需
的功能都是静态编译进内核的,那么是不是可以不用linuxrc文件呢?
    答案是可以不用,在普通的linux操作系统里面可以加入noinitrd选项以告知boot
loader 不使用initrd.如果我们做网关,因为ram是我们的文件系统的载体,所以initrd
一行当然不能去掉,但是我们可以不用linuxrc文件,sysroot文件夹和initrd文件夹.
    不信的话,试试看吧.
    好了,initrd(linuxrc)已经介绍完了.
    linuxrc执行完毕之后,系统就会以真正的根目录正式init.
    系统在/bin/或者/sbin目录下找到init程式,然后根据它的配置文件/etc/fstab进行
初始化,最后调用mingetty程式启动login完成引导.
     ps:init这一部分网上有很多的详细资料所以我在这里并没有展开来说.
    终于写完了,希望对你有所帮助.如有错误,还望指正.
Trackback:
http://tb.donews.net/TrackBack.aspx?PostId=731583




Linux init详解
2008-12-08 12:25
Linux init详解
init是Linux系统操作中不可缺少的程序之一。
　　所谓的init进程，它是一个由内核启动的用户级进程。
　　内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。
　　内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。
　一、什么是INIT:
　　init是Linux系统操作中不可缺少的程序之一。
　　所谓的init进程，它是一个由内核启动的用户级进程。
　　内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。
　　内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。
　　二、运行级别
　　那么，到底什么是运行级呢？
　　简单的说，运行级就是操作系统当前正在运行的功能级别。这个级别从1到6 ，具有不同的功能。
　　不同的运行级定义如下：(可以参考Red Hat Linux 里面的/etc/inittab）
　　# 0 - 停机（千万不能把initdefault 设置为0 ）
　　# 1 - 单用户模式
　　# 2 - 多用户，没有 NFS
　　# 3 - 完全多用户模式(标准的运行级)
　　# 4 - 没有用到
　　# 5 - X11 （xwindow)
　　# 6 - 重新启动 （千万不要把initdefault 设置为6 ）
　　这些级别在/etc/inittab 文件里指定。这个文件是init 程序寻找的主要文件，最先运行的服务是放在/etc/rc.d 目录下的文件。在大多数的Linux 发行版本中，启动脚本都是位于 /etc/rc.d/init.d中的。这些脚本被用ln 命令连接到 /etc/rc.d/rcn.d 目录。(这里的n 就是运行级0-6)
　　三、运行级别的配置
　　运行级别的配置是在/etc/inittab行内进行的，如下所示：
　　12 : 2 : wait : / etc / init.d / rc 2
　　第一个字段是一个任意指定的标签；
　　第二个字段表示这一行适用于运行那个级别（这里是2）；
　　第三个字 段表示进入运行级别时，init应该运行第四个字段内的命令一次，而且init应该等待该命令结束。/etc/init.d/rc命令运行启动和终止输入以便进入运行级别2时所需的任何命令。
　　第四个字段中的命令执行设置运行级别时的一切“杂活”。它启动已经没有运行的服务，终止不应该再在新运行级别内运行的服务。根据Linux版本的不同，采用的具体命令也不同，而且运行级别的配置也是有差别的。
　　init启动时，它会在/etc/inittab内查找一个代码行，这一行指定了默认的运行级别：
　　id : 2 : initdefault :
　　你可以要求init在启动时，进入非默认运行级别，这是通过为内核指定一个“single”或“emergency” 命令行参数来实现的。比如说，内核命令行参数的指定可通过LILO来执行。这样一来，你就可以选择单用户模式了（即运行级别1）。
　　系统正在运行时，telinit命令可更改运行级别。运行级别发生变化时， init 就会从/etc/inittab运行相应的命令。
　　四、/etc/inittab中的特殊配置
　　/etc/inittab中，有几个特殊的特性，允许init重新激活特殊事件。这些特殊特性都是用第三个字段中的特殊关键字标记出来的。比如：
　　1. powerwait
　　允许init在电源被切断时，关闭系统。其前提是具有U P S和监视U P S并通知init电源已被切断的软件。
　　2. ctrlaltdel
　　允许init在用户于控制台键盘上按下C t r l + A l t + D e l组合键时，重新启动系统。注意，如果该系统放在一个公共场所，系统管理员可将C t r l + A l t + D e l组合键配置为别的行为，比如忽略等。
　　3. sysinit
　　系统启动时准备运行的命令。比如说，这个命令将清除/tmp。
　　上面列出的特殊关键字尚不完整。其他的关键字及其使用详情，可参考你的inittab手册页。
　　五、在单用户模式下引导
　　一个重要的运行级别就是单用户模式（运行级别1），该模式中，只有一个系统管理员使用特定的机器，而且尽可能少地运行系统服务，其中包含登录。单用户模式对少数管理任务（比如在/usr分区上运行fsck）而言，是很有必要的，因为这需要卸载分区，但这是不可能的，除非所有的服务系统已被杀死。
　　一个正在运行的系统可以进入单用户模式，具体做法是利用init，请求运行级别1。内核启动时，在内核命令行指定single或emergency关键字，就可进入运行级别1了。内核同时也为init指定命令行， init从关键字得知自己不应该采用默认的运行级别（内核命令行的输入方式和你启动系统的方式有关）。
　　有时，以单用户模式进行启动是必要的，这样一来，用户在装入分区之前，或至少在装入分散的/usr分区之前，能手工运行fsck（在分散的文件系统上，任何活动都可能使其更为分散，所以应该尽可能地运行fsck）。
　　如果自动化的fsck在启动时失败了，启动脚本init的运行将自动进入单用户模式。这样做是为了防止系统使用不连贯的文件系统，这个文件系统是f s c k不能自动修复的。文件系统不连贯的现象极为少见，而且通常会导致硬盘的不连贯或实验性的内核释放，但最好能做到防患于未然。
　　由于安全上的考虑，在单用户模式下，启动外壳脚本之前，配置得当的系统会要求用户提供root密码。否则，它会简单地为L I L O输入合适的一行代码，以r o o t的身份登录（当然，如果/etc/passwd已经由于文件系统的问题而不连贯了，就不适合这里的原则了，为对付这种情况，你最好随时准备一张启动盘）。
　　不同的运行级有不同的用处，也应该根据自己的不同情形来设置。
　　例如，如果丢失了root口令，那么可以让机器启动进入单用户状态。在启动后的 lilo 提示符下输入：
　　init=/bin/sh rw 使机器进入运行级1 ，并把 root 文件系统挂为读写。他会跳过所有系统认证，让你可以使用passwd 程序来改变root口令，然后启动到一个新的运行级。

Linux操作系统中/sbin/init程序的执行过程
2007-09-02 00:28
来自：http://linux.ccidnet.com/art/2583/20070821/1184763_1.html
当init启动后，它通过执行各种启动事务来继续引导进程（检查并监视文件系统，启动后台程序daemons,等等），直至完成用户所有操作环境的设置工作。这里主要涉及4个程序： init、getty(agetty)、login和shell程序。这4个程序之间的关系见下图所示。
init进程的主要任务是根据/etc/rc文件中设置的信息，执行其中设置的命令，然后根据/etc/inittab文件中的信息，为每一个允许登录的终端设备使用fork()创建一个子进程，并在每个新创建的子进程中运行 agetty （getty）程序。而init进程则调用wait()，进入等待子进程结束状态。每当它的一个子进程结束退出，它就会根据wait()返回的pid号知道是哪个对应终端的子进程结束了，因此就会为相应终端设备再创建一个新的子进程，并在该子进程中重新执行agetty程序。这样，每个被允许的终端设备都始终有一个对应的进程为其等待处理。
在正常的操作下，init确定agetty正在工作着以允许用户登录，并且收取孤立进程。孤立进程是指那些其父辈进程已结束的进程；在Linux中所有的进程必须属于单棵进程树，所以孤立进程必须被收取。当系统关闭时，init负责杀死所有其它的进程，卸载所有的文件系统以及停止处理器的工作，以及任何它被配置成要做的工作。
getty程序的主要任务是设置终端类型、属性、速度和线路规程。它打开并初始化一个tty端口，显示提示信息，并等待用户键入用户名。该程序只能由超级用户执行。通常，若/etc/issue文本文件存在，则getty会首先显示其中的文本信息，然后显示登录提示信息（例如：plinux login: ），读取用户键入的登录名，并执行login程序。
为了能让init程序运行getty，/etc/inittab文件中必须含有getty（agetty）命令。/etc/inittab文件中有关agetty的内容例子见如下所示。
列表 3.1 poeigl-1.2中的inittab文件
# inittab for linux, poeigl 1.2
# format:
# ttyline:termcap-entry:getty-command
tty1:con80x60:/bin/agetty 9600 tty1
tty2:con80x60:/bin/agetty 9600 tty2
tty3:con80x60:/bin/agetty 9600 tty3
tty4:con80x60:/bin/agetty 9600 tty4
# tty5:con80x60:/bin/agetty 9600 tty5
# tty64:dumb:/bin/agetty 9600 tty64
# tty65:dumb:/bin/agetty -m -t60 2400 tty65
每个终端都有自己的getty命令。其中列出了tty1—tty4对应的登录项信息。以’#’开始的是注释行。第1列是所用终端设备名称，第2列是指定终端的类型，这里指定了终端类型是con80x60。第3列是所执行的命令及其参数。最后两行中的tty64和tty65对应连接在串行端口上的终端。
对于使用串行端口与主机直接相连的终端以及通过modem拨号连接的终端， Linux的agetty程序还有其它一些属性。如在读取登录名时自动调整tty的设置信息，例如奇偶校验位、檫除字符、行结束字符以及上档键字符等。可选择地从链接的Hayes兼容modem信息中检测出传输波特率。
/dev/inittab中每一项的参数格式与具体使用哪一种getty程序有关。目前一般常用的getty程序有如下几种：
1.agetty（有时直接称为getty）：容易设置，无须配置文件。适用于直接连接的终端；
2.getty（getty_ps的一部分）：适用于直接连接的终端；
3.mgetty：最适合于通过modem连接，也可用于直连；
4.uugetty：仅用于通过modem连接终端，是getty_ps软件包的部分；
5.mingetty：简单的getty。适用于控制台终端或虚拟终端；
6.fbgetty：适用于控制台或虚拟终端。
Redhat 9系统默认配置中带有mingetty和agetty两个程序。控制台或虚拟终端使用的是mingetty。对于实际的字符终端则一般使用agetty。因此在Redhat 9系统的/etc/inittab文件中会看到以下的信息。
列表 3.2 RedHat 9系统的/etc/inittab文件中有关getty的信息
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
其中第1列表示名称tty后的数字，2345表示该mingetty的运行层。respawn表示如果该mingetty被终止，则mingetty将再次自动执行。/sbin/mingetty是命令。ttyn代表/dev/ttyn（n表示数字1—5）。
在登录到Linux系统中之后，你会发现（使用”top”或”ps –ax”命令）自己终端原来的getty进程已经找不到了。因为getty进程执行了login程序，被替换成了login进程，并且最后被替换成你的登录shell进程。
当你在”login: “提示符下键入了你的用户名后，getty会读取用户名并且去执行login程序，也把用户名信息传给了它。因此getty进程被替换成了login进程。此时login进程会接着要求你输入口令。在口令检查通过后就会去执行/etc/passwd文件中对应你用户名项中记录的程序。通常这个程序是 bash shell程序。因此原来的getty进程最终被替换成了bash进程，对应的这三个程序也就都具有相同的进程ID。
当注销登录（log out）时，则该终端上的所有进程都会被终止（killed），包括登录shell进程bash。因此，对于在/etc/inittab文件中列出的 getty程序，一旦其被替换执行的bash程序被终止或退出，init进程就会为对应终端重新创建一个getty进程。
login程序则主要用于要求登录用户输入密码。根据用户输入的用户名，它从口令文件passwd中取得对应用户的登录项，然后调用getpass()以显示”password:”提示信息，读取用户键入的密码，然后使用加密算法对键入的密码进行加密处理，并与口令文件中该用户项中pw_passwd字段作比较。如果用户几次键入的密码均无效，则login程序会以出错码1退出执行，表示此次登录过程失败。此时父进程（进程init）的wait()会返回该退出进程的pid，因此会根据记录下来的信息再次创建一个子进程，并在该子进程中针对该终端设备再次执行agetty程序，重复上述过程。
login程序也可以被用户在运行过程中在shell下当作一个命令执行。此时它可以被用随时从一个用户切换成另一个用户。如果执行时没有给出参数，则login就会显示输入用户名的提示信息。如果用户不是超级用户（root），并且 /etc/目录下存在一个名为nologin的文件，那么该文件中的信息就会被显示出来，此次登录过程也随即被终止。
如果在/etc/usertty文件中对该用户指定了特殊的访问限制，那么这些限制要求必须满足。如果是一个超级用户，那么所使用的登录tty设备必须是在/etc/securetty文件中指定的。
在所有这些条件满足之后，login同样也会要求用户输入密码并对其进行检查。如果.hushlogin存在的话，login就会执行一个“安静”的登录过程，也即不检查是否有邮件，也不显示上次登录时间和motd文件中的信息。否则如果/var/log/lastlog文件存在的话，就会显示其中的最后登录时间。
如果用户键入的密码正确，则login就会把当前工作目录（Currend Work Directory）修改成口令文件中指定的该用户的起始工作目录。并把对该终端设备的访问权限修改成用户读/写和组写，设置进程的组ID。然后利用所得到的信息初始化环境变量信息，例如起始目录（HOME=）、使用的shell程序（SHELL=）、用户名（USER=和LOGNAME=）和系统执行程序的默认路径序列（PATH=）。接着显示/etc/motd文件（message-of-the-day）中的文本信息，并检查并显示该用户是否有邮件的信息。最后login程序改变成登录用户的用户ID并执行口令文件中该用户项中指定的shell程序，如bash或csh等。
如果口令文件/etc/passwd中该用户项中没有指定使用哪个shell程序，系统则会使用默认的/bin/sh程序。如果口令文件中也没有为该用户指定用户起始目录的话，系统就会使用默认的根目录/。有关login程序的一些执行选项和特殊访问限制的说明，请参见Linux系统中的在线手册页（man 8 login）。
Shell程序是一个复杂的命令行解释程序，是当用户登录系统进行交互操作时执行的程序。它是用户与计算机进行交互操作的地方。它获取用户输入的信息，然后执行命令。用户可以在终端上向shell直接进行交互输入，也可以使用shell 脚本文件向shell解释程序输入。在Linux系统中，目前常用的shell有：
Bourne Again Shell,/bin/bash
C shell,/bin/csh（或tcsh）
BSD shell/bin/ash（或bsh）
在登录过程中，系统（login）会从口令文件用户对应登录项的最后一个字段知道应该为用户执行哪个shell程序。
shell程序中实现了一个具有流控制结构的语言，使用相当广泛。目前这些 shell程序都朝着与IEEE POSIX 1003.2兼容的方向发展，因此它们各自虽然各自有自己的特点，但基本功能已经越来越相象。本书主要介绍bash的工作原理和实现机制，其它几种 shell的实现机制与之类似。
在登录过程中login开始执行shell时，所带参数argv[0]的第一个字符是’-’，表示该shell是作为一个登录shell被执行。此时该shell程序会根据该字符，执行某些与登录过程相应的操作。登录shell会首先从 /etc/profile文件以及.profile文件（若存在的话）读取命令并执行。如果在进入shell时设置了ENV环境变量，或者在登录 shell的.profile文件中设置了该变量，则shell下一步会从该变量命名的文件中读去命令并执行。因此用户应该把每次登录时都要执行的命令放在.profile文件中，而把每次运行shell都要执行的命令放在ENV变量指定的文件中。设置ENV环境变量的方法是把下列语句放在你起始目录的. profile文件中。
ENV=$HOME/.anyfilename; export ENV
在执行shell时，除了一些指定的可选项以外，如果还指定了命令行参数，则shell会把第一个参数看作是一个脚本文件名并执行其中的命令，而其余的参数则被看作是shell的位置参数（$1、$2等）。否则shell程序将从其标准输入中读取命令。
在执行shell程序时可以有很多选项，请参见Linux系统中的有关sh的在线手册页中的说明。


Linux 的 initrd (linuxrc,init)
2008-10-19 17:18
Linux 的 initrd 技术是一个非常普遍使用的机制，linux2.6 内核的 initrd 的文件格式由原来的文件系统镜像文件转变成了 cpio 格式，变化不仅反映在文件格式上， linux 内核对这两种格式的 initrd 的处理有着截然的不同。本文首先介绍了什么是 initrd 技术，然后分别介绍了 Linux2.4 内核和 2.6 内核的 initrd 的处理流程。最后通过对 Linux2.6 内核的 initrd 处理部分代码的分析，使读者可以对 initrd 技术有一个全面的认识。为了更好的阅读本文，要求读者对 Linux 的 VFS 以及 initrd 有一个初步的了解。
1．什么是 Initrd
initrd 的英文含义是 boot loader initialized RAM disk，就是由 boot loader 初始化的内存盘。在 linux内核启动前， boot loader 会将存储介质中的 initrd 文件加载到内存，内核启动时会在访问真正的根文件系统前先访问该内存中的 initrd 文件系统。在 boot loader 配置了 initrd 的情况下，内核启动被分成了两个阶段，第一阶段先执行 initrd 文件系统中的"某个文件"，完成加载驱动模块等任务，第二阶段才会执行真正的根文件系统中的 /sbin/init 进程。这里提到的"某个文件"，Linux2.6 内核会同以前版本内核的不同，所以这里暂时使用了"某个文件"这个称呼，后面会详细讲到。第一阶段启动的目的是为第二阶段的启动扫清一切障爱，最主要的是加载根文件系统存储介质的驱动模块。我们知道根文件系统可以存储在包括IDE、SCSI、USB在内的多种介质上，如果将这些设备的驱动都编译进内核，可以想象内核会多么庞大、臃肿。
Initrd 的用途主要有以下四种：
1. linux 发行版的必备部件
linux 发行版必须适应各种不同的硬件架构，将所有的驱动编译进内核是不现实的，initrd 技术是解决该问题的关键技术。Linux 发行版在内核中只编译了基本的硬件驱动，在安装过程中通过检测系统硬件，生成包含安装系统硬件驱动的 initrd，无非是一种即可行又灵活的解决方案。
2. livecd 的必备部件
同 linux 发行版相比，livecd 可能会面对更加复杂的硬件环境，所以也必须使用 initrd。
3. 制作 Linux usb 启动盘必须使用 initrd
usb 设备是启动比较慢的设备，从驱动加载到设备真正可用大概需要几秒钟时间。如果将 usb 驱动编译进内核，内核通常不能成功访问 usb 设备中的文件系统。因为在内核访问 usb 设备时， usb 设备通常没有初始化完毕。所以常规的做法是，在 initrd 中加载 usb 驱动，然后休眠几秒中，等待 usb设备初始化完毕后再挂载 usb 设备中的文件系统。
4. 在 linuxrc 脚本中可以很方便地启用个性化 bootsplash。


2．Linux2.4内核对 Initrd 的处理流程
为了使读者清晰的了解Linux2.6内核initrd机制的变化，在重点介绍Linux2.6内核initrd之前，先对linux2.4内核的 initrd进行一个简单的介绍。Linux2.4内核的initrd的格式是文件系统镜像文件，本文将其称为image-initrd，以区别后面介绍的linux2.6内核的cpio格式的initrd。 linux2.4内核对initrd的处理流程如下：
1. boot loader把内核以及/dev/initrd的内容加载到内存，/dev/initrd是由boot loader初始化的设备，存储着initrd。
2. 在内核初始化过程中，内核把 /dev/initrd 设备的内容解压缩并拷贝到 /dev/ram0 设备上。
3. 内核以可读写的方式把 /dev/ram0 设备挂载为原始的根文件系统。
4. 如果 /dev/ram0 被指定为真正的根文件系统，那么内核跳至最后一步正常启动。
5. 执行 initrd 上的 /linuxrc 文件，linuxrc 通常是一个脚本文件，负责加载内核访问根文件系统必须的驱动， 以及加载根文件系统。
6. /linuxrc 执行完毕，真正的根文件系统被挂载。
7. 如果真正的根文件系统存在 /initrd 目录，那么 /dev/ram0 将从 / 移动到 /initrd。否则如果 /initrd 目录不存在， /dev/ram0 将被卸载。
8. 在真正的根文件系统上进行正常启动过程 ，执行 /sbin/init。 linux2.4 内核的 initrd 的执行是作为内核启动的一个中间阶段，也就是说 initrd 的 /linuxrc 执行以后，内核会继续执行初始化代码，我们后面会看到这是 linux2.4 内核同 2.6 内核的 initrd 处理流程的一个显著区别。



[url=http://www.ibm.com/developerworks/cn/linux/l-k26initrd/#main][/url]
3．Linux2.6 内核对 Initrd 的处理流程
linux2.6 内核支持两种格式的 initrd，一种是前面第 3 部分介绍的 linux2.4 内核那种传统格式的文件系统镜像－image-initrd，它的制作方法同 Linux2.4 内核的 initrd 一样，其核心文件就是 /linuxrc。另外一种格式的 initrd 是 cpio 格式的，这种格式的 initrd 从 linux2.5 起开始引入，使用 cpio 工具生成，其核心文件不再是 /linuxrc，而是 /init，本文将这种 initrd 称为 cpio-initrd。尽管 linux2.6 内核对 cpio-initrd和 image-initrd 这两种格式的 initrd 均支持，但对其处理流程有着显著的区别，下面分别介绍 linux2.6 内核对这两种 initrd 的处理流程。
cpio-initrd 的处理流程
1． boot loader 把内核以及 initrd 文件加载到内存的特定位置。
2． 内核判断initrd的文件格式，如果是cpio格式。
3． 将initrd的内容释放到rootfs中。
4． 执行initrd中的/init文件，执行到这一点，内核的工作全部结束，完全交给/init文件处理。
image-initrd的处理流程
1． boot loader把内核以及initrd文件加载到内存的特定位置。
2． 内核判断initrd的文件格式，如果不是cpio格式，将其作为image-initrd处理。
3． 内核将initrd的内容保存在rootfs下的/initrd.image文件中。
4． 内核将/initrd.image的内容读入/dev/ram0设备中，也就是读入了一个内存盘中。
5． 接着内核以可读写的方式把/dev/ram0设备挂载为原始的根文件系统。
6． .如果/dev/ram0被指定为真正的根文件系统，那么内核跳至最后一步正常启动。
7． 执行initrd上的/linuxrc文件，linuxrc通常是一个脚本文件，负责加载内核访问根文件系统必须的驱动， 以及加载根文件系统。
8． /linuxrc执行完毕，常规根文件系统被挂载
9． 如果常规根文件系统存在/initrd目录，那么/dev/ram0将从/移动到/initrd。否则如果/initrd目录不存在， /dev/ram0将被卸载。
10． 在常规根文件系统上进行正常启动过程 ，执行/sbin/init。
通过上面的流程介绍可知，Linux2.6内核对image-initrd的处理流程同linux2.4内核相比并没有显著的变化， cpio-initrd的处理流程相比于image-initrd的处理流程却有很大的区别，流程非常简单，在后面的源代码分析中，读者更能体会到处理的简捷。
4．cpio-initrd同image-initrd的区别与优势
没有找到正式的关于cpio-initrd同image-initrd对比的文献，根据笔者的使用体验以及内核代码的分析，总结出如下三方面的区别，这些区别也正是cpio-initrd的优势所在：
cpio-initrd的制作方法更加简单
cpio-initrd的制作非常简单，通过两个命令就可以完成整个制作过程
#假设当前目录位于准备好的initrd文件系统的根目录下
bash# find . | cpio -c -o > ../initrd.img
bash# gzip ../initrd.img
而传统initrd的制作过程比较繁琐，需要如下六个步骤
#假设当前目录位于准备好的initrd文件系统的根目录下
bash# dd if=/dev/zero of=../initrd.img bs=512k count=5
bash# mkfs.ext2 -F -m0 ../initrd.img
bash# mount -t ext2 -o loop ../initrd.img    /mnt
bash# cp -r    * /mnt
bash# umount /mnt
bash# gzip -9 ../initrd.img
本文不对上面命令的含义作细节的解释，因为本文主要介绍的是linux内核对initrd的处理，对上面命令不理解的读者可以参考相关文档。
cpio-initrd的内核处理流程更加简化
通过上面initrd处理流程的介绍，cpio-initrd的处理流程显得格外简单，通过对比可知cpio-initrd的处理流程在如下两个方面得到了简化：
1． cpio-initrd并没有使用额外的ramdisk,而是将其内容输入到rootfs中，其实rootfs本身也是一个基于内存的文件系统。这样就省掉了ramdisk的挂载、卸载等步骤。
2． cpio-initrd启动完/init进程，内核的任务就结束了，剩下的工作完全交给/init处理；而对于image-initrd，内核在执行完 /linuxrc进程后，还要进行一些收尾工作，并且要负责执行真正的根文件系统的/sbin/init。通过图1可以更加清晰的看出处理流程的区别：
图1内核对cpio-initrd和image-initrd处理流程示意图


cpio-initrd的职责更加重要
如图1所示，cpio-initrd不再象image-initrd那样作为linux内核启动的一个中间步骤，而是作为内核启动的终点，内核将控制权交给cpio-initrd的/init文件后，内核的任务就结束了，所以在/init文件中，我们可以做更多的工作，而不比担心同内核后续处理的衔接问题。当然目前linux发行版的cpio-initrd的/init文件的内容还没有本质的改变，但是相信initrd职责的增加一定是一个趋势。

Linux init详解
2008-10-19 16:05
一、什么是INIT:
　　init是Linux系统操作中不可缺少的程序之一。
　　所谓的init进程，它是一个由内核启动的用户级进程。
　　内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结
构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一
个进程（其进程编号始终为1）。
　　内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/
sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也
会失败。
　　二、运行级别
　　那么，到底什么是运行级呢？
　　简单的说，运行级就是操作系统当前正在运行的功能级别。这个级别从1到6 ，具有不同
的功能。
　　不同的运行级定义如下：(可以参考Red Hat Linux 里面的/etc/inittab）
　　# 0 - 停机（千万不能把initdefault 设置为0 ）
　　# 1 - 单用户模式
　　# 2 - 多用户，没有 NFS
　　# 3 - 完全多用户模式(标准的运行级)
　　# 4 - 没有用到
　　# 5 - X11 （xwindow)
　　# 6 - 重新启动 （千万不要把initdefault 设置为6 ）
　　这些级别在/etc/inittab 文件里指定。这个文件是init 程序寻找的主要文件，最先运
行的服务是放在/etc/rc.d 目录下的文件。在大多数的Linux 发行版本中，启动脚本都是位
于 /etc/rc.d/init.d中的。这些脚本被用ln 命令连接到 /etc/rc.d/rcn.d 目录。(这里的
n 就是运行级0-6)
三、运行级别的配置
　　运行级别的配置是在/etc/inittab行内进行的，如下所示：
　　12 : 2 : wait : / etc / init.d / rc 2
　　第一个字段是一个任意指定的标签；
　　第二个字段表示这一行适用于运行那个级别（这里是2）；
　　第三个字 段表示进入运行级别时，init应该运行第四个字段内的命令一次，而且init应
该等待该命令结束。/etc/init.d/rc命令运行启动和终止输入以便进入运行级别2时所需的任
何命令。
　　第四个字段中的命令执行设置运行级别时的一切“杂活”。它启动已经没有运行的服务
，终止不应该再在新运行级别内运行的服务。根据Linux版本的不同，采用的具体命令也不同
，而且运行级别的配置也是有差别的。
　　init启动时，它会在/etc/inittab内查找一个代码行，这一行指定了默认的运行级别：
id : 2 : initdefault :
　　你可以要求init在启动时，进入非默认运行级别，这是通过为内核指定一个“single”
或“emergency” 命令行参数来实现的。比如说，内核命令行参数的指定可通过LILO来执行
。这样一来，你就可以选择单用户模式了（即运行级别1）。
　　系统正在运行时，telinit命令可更改运行级别。运行级别发生变化时， init 就会从/
etc/inittab运行相应的命令。
　　四、/etc/inittab中的特殊配置
　　/etc/inittab中，有几个特殊的特性，允许init重新激活特殊事件。这些特殊特性都是
用第三个字段中的特殊关键字标记出来的。比如：
　　1. powerwait
　　允许init在电源被切断时，关闭系统。其前提是具有U P S和监视U P S并通知init电源
已被切断的软件。
　　2. ctrlaltdel
　　允许init在用户于控制台键盘上按下C t r l + A l t + D e l组合键时，重新启动系统
。注意，如果该系统放在一个公共场所，系统管理员可将C t r l + A l t + D e l组合键配
置为别的行为，比如忽略等。
3. sysinit
　　系统启动时准备运行的命令。比如说，这个命令将清除/tmp。
　　上面列出的特殊关键字尚不完整。其他的关键字及其使用详情，可参考你的inittab手册
页。
　　五、在单用户模式下引导
　　一个重要的运行级别就是单用户模式（运行级别1），该模式中，只有一个系统管理员使
用特定的机器，而且尽可能少地运行系统服务，其中包含登录。单用户模式对少数管理任务
（比如在/usr分区上运行fsck）而言，是很有必要的，因为这需要卸载分区，但这是不可能
的，除非所有的服务系统已被杀死。
　　一个正在运行的系统可以进入单用户模式，具体做法是利用init，请求运行级别1。内核
启动时，在内核命令行指定single或emergency关键字，就可进入运行级别1了。内核同时也
为init指定命令行， init从关键字得知自己不应该采用默认的运行级别（内核命令行的输入
方式和你启动系统的方式有关）。
　　有时，以单用户模式进行启动是必要的，这样一来，用户在装入分区之前，或至少在装
入分散的/usr分区之前，能手工运行fsck（在分散的文件系统上，任何活动都可能使其更为
分散，所以应该尽可能地运行fsck）。
　　如果自动化的fsck在启动时失败了，启动脚本init的运行将自动进入单用户模式。这样
做是为了防止系统使用不连贯的文件系统，这个文件系统是f s c k不能自动修复的。文件系
统不连贯的现象极为少见，而且通常会导致硬盘的不连贯或实验性的内核释放，但最好能做
到防患于未然。
　　由于安全上的考虑，在单用户模式下，启动外壳脚本之前，配置得当的系统会要求用户
提供root密码。否则，它会简单地为L I L O输入合适的一行代码，以r o o t的身份登录（
当然，如果/etc/passwd已经由于文件系统的问题而不连贯了，就不适合这里的原则了，为对
付这种情况，你最好随时准备一张启动盘）。
　　不同的运行级有不同的用处，也应该根据自己的不同情形来设置。
　　例如，如果丢失了root口令，那么可以让机器启动进入单用户状态。在启动后的 lilo
提示符下输入：
init=/bin/sh rw 使机器进入运行级1 ，并把 root 文件系统挂为读写。他会跳过所有
系统认证，让你可以使用passwd 程序来改变root口令，然后启动到一个新的运行级。





本文来自ChinaUnix博客，如果查看原文请点：http://blog.chinaunix.net/u2/78225/showart_1728140.html

