#include <libhildondesktop/hildon-status-bar-item.h>
#include <libhildondesktop/libhildondesktop.h>
#include <libhildonwm/hd-wm.h>

/*lkadd{*/
#include <stdlib.h>
#include <X11/Xatom.h>
#include <libosso.h>
//#include <unistd.h>
//#include <stdio.h>
//#include <string.h>
//#include <locale.h>
//#include <X11/Xlib.h>
//#include <X11/cursorfont.h>
//#include <X11/Xmu/WinUtil.h>
//#include <glib.h>
//#include <glib/gprintf.h>
#define MAX_PROPERTY_VALUE_LEN 4096
#ifndef MY_DEBUG_OUTPUT
#define MY_DEBUG_OUTPUT 1
#endif

/*for send*/
//# define OSSO_HOMEAPP_NAME       "hello_homearea"
# define OSSO_HOMEAPP_NAME       "homeareaapp"
# define OSSO_HOMEAPP_SERVICE    "com.nokia."OSSO_HOMEAPP_NAME
# define OSSO_HOMEAPP_OBJECT     "/com/nokia/"OSSO_HOMEAPP_NAME
# define OSSO_HOMEAPP_IFACE      "com.nokia."OSSO_HOMEAPP_NAME
# define OSSO_HOMEAPP_MESSAGE 	  "desktop"
#define MENU_ICON_PATH "/usr/share/icons/hicolor/menu/"


/*for send*/
# define OSSO_CLOSEAPPFROMDESKTOP_NAME       "closeApp"
# define OSSO_CLOSEAPPFROMDESKTOP_SERVICE    "com.nokia."OSSO_CLOSEAPPFROMDESKTOP_NAME
# define OSSO_CLOSEAPPFROMDESKTOP_OBJECT     "/com/nokia/"OSSO_CLOSEAPPFROMDESKTOP_NAME
# define OSSO_CLOSEAPPFROMDESKTOP_IFACE      "com.nokia."OSSO_CLOSEAPPFROMDESKTOP_NAME
# define OSSO_CLOSEAPPFROMDESKTOP_MESSAGE 	  "closeAPP"


static gboolean envir_utf8;
static struct {
    int verbose;
    int force_utf8;
    int show_class;
    int show_pid;
    int show_geometry;
    int match_by_id;
	int match_by_cls;
    int full_window_title_match;
    int wa_desktop_titles_invalid_utf8;
    char *param_window;
    char *param;
} options;
static Window *client_list = NULL;/*窗口列表相关*/
int desktopi = -1;/*桌面的索引*/
static char *menu_image[] = {
		MENU_ICON_PATH"marvell_abiword.png",MENU_ICON_PATH"marvell-photo.png",
		MENU_ICON_PATH"marvell_datetime.png",MENU_ICON_PATH"marvell_filemanager.png",
		MENU_ICON_PATH"marvell_galculator.png",MENU_ICON_PATH"marvell_game_1.png",
		MENU_ICON_PATH"marvell_game_2.png",MENU_ICON_PATH"marvell_gnumeric.png",
		MENU_ICON_PATH"marvell_maemopad.png",MENU_ICON_PATH"marvell_pdf.png",
		MENU_ICON_PATH"marvell_ts.png",MENU_ICON_PATH"marvell_sysset.png",
		MENU_ICON_PATH"marvell_keyboard.png",MENU_ICON_PATH"marvell_paint.png",
		MENU_ICON_PATH"marvell_ebook.png",MENU_ICON_PATH"marvell_stardict.png",
		MENU_ICON_PATH"marvell_pidgin.png",MENU_ICON_PATH"marvell-powermanager.png",
		MENU_ICON_PATH"marvell_ie.png",MENU_ICON_PATH"marvell-video.png",
		MENU_ICON_PATH"marvell-audio.png",MENU_ICON_PATH"marvell-home.png"};
static char *menu_names[] = {"NeuWord","NeuCalendar","NeuDateTime","NeuFileMG","NeuCalc",
		"NeuGame_1","NeuGame_2","NeuEXCEL","NeuNote","NeuPdf","NeuTouchScreen","NeuSyssetting",
		"NeuKeyboard","NeuPaint","NeuEbook","NeuStardict","NeuPidgin","NeuPowerM","NeuIE",
		"NeuShutdown","NeuTest"};
/*lkadd}*/
typedef struct
{
	HildonStatusBarItem *item;
	GtkWidget *button;
}TaskManagerPlugin;
static void task_manager_position_func(GtkMenu *menu,gint *x, gint *y,gboolean *push_in, gpointer user_data)
{/*lkcomment用来定位弹出菜单位置的函数*/
	// *x = 52;
	/**x = 400;*/
	*y = 52;
	*push_in = FALSE;
}



/*lkadd{*/
/*for dbus*/

static void on_SendMGToHome ()
{
    osso_context_t *osso_context;
   // osso_rpc_t retval;
    osso_return_t ret;
    /* Initialize maemo application */
    osso_context = osso_initialize(OSSO_HOMEAPP_SERVICE, "0.0.1", FALSE, NULL);
    /* Check that initialization was ok */
    if (osso_context == NULL) {
        //return OSSO_ERROR;
		g_print ("Error initialize osso in taskmanager\n");
		return;
    }
    osso_rpc_run(osso_context, 
		       OSSO_HOMEAPP_SERVICE, 
		       OSSO_HOMEAPP_OBJECT, 
		       OSSO_HOMEAPP_IFACE, 
		       "Tpause", NULL/*&retval*/, DBUS_TYPE_INVALID);/*关键发送消息*/
    //osso_rpc_free_val(&retval);
    osso_deinitialize(osso_context);
	g_print("home Stop!!!\n");
}
static void on_SendMGToHome2 ()
{
    osso_context_t *osso_context;
   // osso_rpc_t retval;
    osso_return_t ret;
    /* Initialize maemo application */
    osso_context = osso_initialize(OSSO_HOMEAPP_SERVICE, "0.0.1", FALSE, NULL);
    /* Check that initialization was ok */
    if (osso_context == NULL) {
        //return OSSO_ERROR;
		return;
    }
    osso_rpc_run(osso_context, 
		       OSSO_HOMEAPP_SERVICE, 
		       OSSO_HOMEAPP_OBJECT, 
		       OSSO_HOMEAPP_IFACE, 
		       OSSO_HOMEAPP_MESSAGE, NULL/*&retval*/, DBUS_TYPE_INVALID);/*关键发送消息*/
    //osso_rpc_free_val(&retval);
    osso_deinitialize(osso_context);
	g_print("home Start!!!\n");
}
static void on_SendMGToStatusbar ()
{
    osso_context_t *osso_context;
    osso_context = osso_initialize(OSSO_CLOSEAPPFROMDESKTOP_SERVICE, "0.0.1", FALSE, NULL);
    /* Check that initialization was ok */
    if (osso_context == NULL) {
        //return OSSO_ERROR;
		g_print ("Error initialize osso in dropmenu--2\n");
		return;
    }
    osso_rpc_run(osso_context, 
		       OSSO_CLOSEAPPFROMDESKTOP_SERVICE, 
		       OSSO_CLOSEAPPFROMDESKTOP_OBJECT, 
		       OSSO_CLOSEAPPFROMDESKTOP_IFACE, 
		       OSSO_CLOSEAPPFROMDESKTOP_MESSAGE, NULL/*&retval*/, DBUS_TYPE_INVALID);/*关键发送消息*/
    //osso_rpc_free_val(&retval);
    osso_deinitialize(osso_context);
	g_print("Icon Switch!!!\n");
}


static void on_SendMGToStatusbar2()
{
    osso_context_t *osso_context;
    osso_context = osso_initialize(OSSO_CLOSEAPPFROMDESKTOP_SERVICE, "0.0.1", FALSE, NULL);
    /* Check that initialization was ok */
    if (osso_context == NULL) {
        //return OSSO_ERROR;
		g_print ("Error initialize osso in dropmenu--2\n");
		return;
    }
    osso_rpc_run(osso_context, 
		       OSSO_CLOSEAPPFROMDESKTOP_SERVICE, 
		       OSSO_CLOSEAPPFROMDESKTOP_OBJECT, 
		       OSSO_CLOSEAPPFROMDESKTOP_IFACE, 
		       "desktop", NULL/*&retval*/, DBUS_TYPE_INVALID);/*关键发送消息*/
    //osso_rpc_free_val(&retval);
    osso_deinitialize(osso_context);
	g_print("Icon Switch!!!\n");
}
/*charset*/
static void init_charset (void)
{
    const gchar *charset; /* unused */
    gchar *lang = getenv("LANG") ? g_ascii_strup(getenv("LANG"), -1) : NULL; 
    gchar *lc_ctype = getenv("LC_CTYPE") ? g_ascii_strup(getenv("LC_CTYPE"), -1) : NULL;
    
    /* this glib function doesn't work on my system ... */
    envir_utf8 = g_get_charset(&charset);

    /* ... therefore we will examine the environment variables */
    if (lc_ctype && (strstr(lc_ctype, "UTF8") || strstr(lc_ctype, "UTF-8"))) {
        envir_utf8 = TRUE;
    }
    else if (lang && (strstr(lang, "UTF8") || strstr(lang, "UTF-8"))) {
        envir_utf8 = TRUE;
    }

    g_free(lang);
    g_free(lc_ctype);
    
    if (options.force_utf8) {
        envir_utf8 = TRUE;
    }
    g_print("envir_utf8: %d\n", envir_utf8);
}

/*客户消息*/
static int client_msg(Display *disp, Window win, char *msg, /* {{{ */
        unsigned long data0, unsigned long data1, 
        unsigned long data2, unsigned long data3,
        unsigned long data4) {
    XEvent event;
    long mask = SubstructureRedirectMask | SubstructureNotifyMask;

    event.xclient.type = ClientMessage;
    event.xclient.serial = 0;
    event.xclient.send_event = True;
    event.xclient.message_type = XInternAtom(disp, msg, False);
    event.xclient.window = win;
    event.xclient.format = 32;
    event.xclient.data.l[0] = data0;
    event.xclient.data.l[1] = data1;
    event.xclient.data.l[2] = data2;
    event.xclient.data.l[3] = data3;
    event.xclient.data.l[4] = data4;
    
    if (XSendEvent(disp, DefaultRootWindow(disp), False, mask, &event)) {
        return EXIT_SUCCESS;
    }
    else {
        fprintf(stderr, "Cannot send %s event.\n", msg);
        return EXIT_FAILURE;
    }
}/*}}}*/

/*获得窗口属性*/
static gchar *get_property (Display *disp, Window win,Atom xa_prop_type, gchar *prop_name, unsigned long *size)
{
    Atom xa_prop_name;
    Atom xa_ret_type;
    int ret_format;
    unsigned long ret_nitems;
    unsigned long ret_bytes_after;
    unsigned long tmp_size;
    unsigned char *ret_prop;
    gchar *ret;
    
    xa_prop_name = XInternAtom(disp, prop_name, False);
    
    if (XGetWindowProperty(disp, win, xa_prop_name, 0, MAX_PROPERTY_VALUE_LEN / 4, False,
            xa_prop_type, &xa_ret_type, &ret_format,     
            &ret_nitems, &ret_bytes_after, &ret_prop) != Success) {
	g_print("Cannot get %s property.\n, prop_name");
        return NULL;
    }
  
    if (xa_ret_type != xa_prop_type) {
        g_print("Invalid type of %s property.\n", prop_name);
        XFree(ret_prop);
        return NULL;
    }

    /* null terminate the result to make string handling easier */
    tmp_size = (ret_format / 8) * ret_nitems;
    /* Correct 64 Architecture implementation of 32 bit data */
    if(ret_format==32) tmp_size *= sizeof(long)/4;
    ret = g_malloc(tmp_size + 1);
    memcpy(ret, ret_prop, tmp_size);
    ret[tmp_size] = '\0';

    if (size) {
        *size = tmp_size;
    }
    
    XFree(ret_prop);
    return ret;
}
/*获得窗口标题*/

static gchar *get_window_title (Display *disp, Window win)
{
    gchar *title_utf8;
    gchar *wm_name;
    gchar *net_wm_name;

    wm_name = get_property(disp, win, XA_STRING, "WM_NAME", NULL);
    net_wm_name = get_property(disp, win, 
            XInternAtom(disp, "UTF8_STRING", False), "_NET_WM_NAME", NULL);

    if (net_wm_name) {
        title_utf8 = g_strdup(net_wm_name);
    }
    else {
        if (wm_name) {
            title_utf8 = g_locale_to_utf8(wm_name, -1, NULL, NULL, NULL);
        }
        else {
            title_utf8 = NULL;
        }
    }

    g_free(wm_name);
    g_free(net_wm_name);
    
    return title_utf8;
}

/*获得窗口程序类型*/

static gchar *get_window_class (Display *disp, Window win)
{
    gchar *class_utf8;
    gchar *wm_class;
    unsigned long size;

    wm_class = get_property(disp, win, XA_STRING, "WM_CLASS", &size);
    if (wm_class) {
        gchar *p_0 = strchr(wm_class, '\0');
        if (wm_class + size - 1 > p_0) {
            *(p_0) = '.';
        }
        class_utf8 = g_locale_to_utf8(wm_class, -1, NULL, NULL, NULL);
    }
    else {
        class_utf8 = NULL;
    }

    g_free(wm_class);
    
    return class_utf8;
}

/*???*/

static gchar *get_output_str (gchar *str, gboolean is_utf8)
{
    gchar *out;
   
    if (str == NULL) {
        return NULL;
    }
    
    if (envir_utf8) {
        if (is_utf8) {
            out = g_strdup(str);
        }
        else {
            if (! (out = g_locale_to_utf8(str, -1, NULL, NULL, NULL))) {
                g_print("Cannot convert string from locale charset to UTF-8.\n");
                out = g_strdup(str);
            }
        }
    }
    else {
        if (is_utf8) {
            if (! (out = g_locale_from_utf8(str, -1, NULL, NULL, NULL))) {
                g_print("Cannot convert string from UTF-8 to locale charset.\n");
                out = g_strdup(str);
            }
        }
        else {
            out = g_strdup(str);
        }
    }

    return out;
}

/*获得窗口列表*/
static Window *get_client_list (Display *disp, unsigned long *size)
{
    Window *client_list;

    if ((client_list = (Window *)get_property(disp, DefaultRootWindow(disp), 
                    XA_WINDOW, "_NET_CLIENT_LIST", size)) == NULL) {
        if ((client_list = (Window *)get_property(disp, DefaultRootWindow(disp), 
                        XA_CARDINAL, "_WIN_CLIENT_LIST", size)) == NULL) {
            fputs("Cannot get client list properties. \n"
                  "(_NET_CLIENT_LIST or _WIN_CLIENT_LIST)"
                  "\n", stderr);
            return NULL;
        }
    }

    return client_list;
}


/*激活窗口*/
static int activate_window (Display *disp, Window win, 
        gboolean switch_desktop)
{
    unsigned long *desktop;

    /* desktop ID */
    if ((desktop = (unsigned long *)get_property(disp, win,
            XA_CARDINAL, "_NET_WM_DESKTOP", NULL)) == NULL) {
        if ((desktop = (unsigned long *)get_property(disp, win,
                XA_CARDINAL, "_WIN_WORKSPACE", NULL)) == NULL) {
            g_print("Cannot find desktop ID of the window.\n");
        }
    }

    if (switch_desktop && desktop) {
        if (client_msg(disp, DefaultRootWindow(disp), 
                    "_NET_CURRENT_DESKTOP", 
                    *desktop, 0, 0, 0, 0) != EXIT_SUCCESS) {
            g_print("Cannot switch desktop.\n");
        }
        g_free(desktop);
    }

    client_msg(disp, win, "_NET_ACTIVE_WINDOW", 
            0, 0, 0, 0, 0);
    XMapRaised(disp, win);

    return EXIT_SUCCESS;
}



static void active_desktop(gpointer data)
{
	hd_wm_top_desktop();
	/**send message***/
	on_SendMGToHome2();

	Display *disp;
	gchar *title_utf8 = NULL;
	Window *win = NULL;
    if (! (disp = XOpenDisplay(NULL))) {
        fputs("Cannot open display.\n", stderr);
        return ;
    }/*打开显示*/
	win = (Window*)data;
#if MY_DEBUG_OUTPUT == 1
	title_utf8 = get_window_title(disp, *win); /* UTF8 */
	g_print("********the title of the window you want to activate is %s\n", title_utf8);
#endif
    activate_window (disp, *win,TRUE); 
	if(NULL != client_list)
	{
		g_free(client_list);
		client_list = NULL;
	}
    XCloseDisplay(disp);
    g_free(title_utf8);
	on_SendMGToStatusbar2();
}


/*窗口激活调用*/
static void active_window(gpointer data)
{
	Display *disp;
	gchar *title_utf8 = NULL;
	Window *win = NULL;
    if (! (disp = XOpenDisplay(NULL))) {
        fputs("Cannot open display.\n", stderr);
        return ;
    }/*打开显示*/

	/*桌面泡泡置顶*/
	/*hd_wm_top_desktop();
	if(desktopi != -1)
	{
		win = &client_list[desktopi];
		activate_window (disp, *win,TRUE); 
	}*/
	win = (Window*)data;
#if MY_DEBUG_OUTPUT == 1
	title_utf8 = get_window_title(disp, *win); /* UTF8 */
	g_print("********the title of the window you want to activate is %s\n", title_utf8);
#endif
    activate_window (disp, *win,TRUE); 
	if(NULL != client_list)
	{
		g_free(client_list);
		client_list = NULL;
	}
    XCloseDisplay(disp);
    g_free(title_utf8);
	on_SendMGToHome ();
	on_SendMGToStatusbar();

}
static GtkWidget* createMenuByTitle()
{/*这个程序获得窗口的名字，如果没有窗口名字则获取程序类的名字，id?*/
	/*********for get title**********/
	Display *disp;
    unsigned long client_list_size;
    int i;
	int count;
	/*****for create Menu*******/
	GtkWidget *tm_menu;
	GtkWidget *menu_item;
	GtkWidget *image = NULL;
	HDWM *hdwm;
	GList *list = NULL;

    if (! (disp = XOpenDisplay(NULL))) {
        fputs("Cannot open display.\n", stderr);
        return NULL;
    }/*打开显示*/
    
	if(NULL != client_list)
	{
		g_free(client_list);
		client_list = NULL;
	}
    if ((client_list = get_client_list(disp, &client_list_size)) == NULL) {
        return NULL;
    }
	count = client_list_size / sizeof(Window);/*窗口的数目*/
	tm_menu = gtk_menu_new();
	for(i = 0; i < count; ++i)
	{
		/*根据窗口获取相关信息*/
		gchar *title;
		gchar *title_utf8 = get_window_title(disp, client_list[i]); /* UTF8 */
		gchar *title_out = get_output_str(title_utf8, TRUE);/*获取窗口标题*/
		gchar *class_out = get_window_class(disp, client_list[i]); /*获取窗口类名称*/
		/*获取窗口对应的进程pid*/
        /*unsigned long *pid;
		pid = (unsigned long *)get_property(disp, client_list[i],
				XA_CARDINAL, "_NET_WM_PID", NULL);*/
		if(title_out)
		{
			title = title_out;
			g_print("*********the title is %s\n", title_out);
		}
		else if(class_out)
		{
			title = class_out;
			g_print("*********the title is null so the class %s\n", class_out);
		}
		else
		{
			g_print("can't get title and appclass");
			class_out = (gchar*)g_malloc(5);
			title =(gchar*)g_malloc(5);
		}
		/********根据利用窗口获取的信息来创建菜单*******/
		if(strcmp(title, "hildon-desktop") != 0)
		{/*前2个是没有用的窗口标题,所以菜单项从第三个开始添加*/
			/*if(g_strcmp0(title, "desktop app class name???"))这句话编译能通过但是无法找到该函数*/
			if(strcmp(class_out, "SDL_App.SDL_App") != 0&&strcmp(title_out, "Keyboard") != 0)
			{
				menu_item = gtk_image_menu_item_new_with_label(title);
				GtkWidget *image;
/****************************************************************************************/
				if(strcmp(title, "Photo Viewer") == 0){
					image = gtk_image_new_from_file (menu_image[1]);
				}
				else if(strcmp(title, "VideoPlayer") == 0){
					image = gtk_image_new_from_file (menu_image[19]);
				}
				else if(strcmp(title, "AudioPlayer") == 0){
					image = gtk_image_new_from_file (menu_image[20]);
				}
				else if(strcmp(class_out, "abiword.Abiword") == 0){
					image = gtk_image_new_from_file (menu_image[0]);
				}
				else if(strcmp(title, "DateTime") == 0){
					image = gtk_image_new_from_file (menu_image[2]);
				}
				else if(strcmp(title, "Filemanager") == 0){
					image = gtk_image_new_from_file (menu_image[3]);
				}
				else if(strcmp(title, "galculator") == 0){
					image = gtk_image_new_from_file (menu_image[4]);
				}
				else if(strcmp(title, "GiveMeFive") == 0){
					image = gtk_image_new_from_file (menu_image[5]);
				}
				else if(strcmp(title, "EightyOne") == 0){
					image = gtk_image_new_from_file (menu_image[6]);
				}
				else if(strcmp(title, "MaemoPad") == 0){
					image = gtk_image_new_from_file (menu_image[8]);
				}
				else if(strcmp(title, "PDF Viewer") == 0){
					image = gtk_image_new_from_file (menu_image[9]);
				}
				else if(strcmp(class_out, "FBReader.FBReader") == 0){
					image = gtk_image_new_from_file (menu_image[14]);
				}
				else if(strcmp(class_out, "Gnumeric.Gnumeric") == 0){
					image = gtk_image_new_from_file (menu_image[7]);
				}
				else if(strcmp(class_out, "stardict.Stardict") == 0){
					image = gtk_image_new_from_file (menu_image[15]);
				}
				else if(strcmp(title, "Power Manager") == 0){
					image = gtk_image_new_from_file (menu_image[17]);
				}
				else if(strcmp(class_out, "Navigator.Iceweasel") == 0){
					image = gtk_image_new_from_file (menu_image[18]);
				}
				else{
					image = gtk_image_new_from_file (menu_image[10]);
				}

/****************************************************************************************/
				gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(menu_item), image);
				gtk_menu_shell_append(GTK_MENU_SHELL(tm_menu), menu_item);
				g_signal_connect_swapped(G_OBJECT(menu_item), "activate",
						G_CALLBACK(active_window), &client_list[i]/*????*/);/*lkcomment这里点击taskmanager中的按钮则激活相应的程序*/
				gtk_widget_show(menu_item);
			}
			else
			{/*如果获得的标题是泡泡桌面程序的标题,把这句话放到后面，增加效率*/
				if(strcmp(class_out, "SDL_App.SDL_App") == 0)
				{
					desktopi = i;
				}
			}
		}


	/**释放资源**/
        g_free(title_utf8);
        g_free(title_out);
        g_free(class_out);
        /*g_free(pid);*/
	}

	/**这里应该弄一个桌面切换的在最下面***/
	if(desktopi > -1)
	{
		GtkWidget *sep_item = gtk_separator_menu_item_new();
		gtk_widget_show(sep_item);
		gtk_menu_shell_append(GTK_MENU_SHELL(tm_menu), sep_item);
		menu_item = gtk_image_menu_item_new_with_label("Desktop");
		GtkWidget *image;
		image = gtk_image_new_from_file (menu_image[21]);
		gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(menu_item), image);
		gtk_menu_shell_append(GTK_MENU_SHELL(tm_menu), menu_item);
		g_signal_connect_swapped(G_OBJECT(menu_item), "activate",
				G_CALLBACK(active_desktop), &client_list[desktopi]/*????*/);/*lkcomment这里点击taskmanager中的按钮则激活相应的程序*/
		gtk_widget_show(menu_item);
	}

	/**释放资源**/
    XCloseDisplay(disp);
	return tm_menu;

}
/*************** change icon *****************>>>*/
static void changeIcon(const gchar *name,GtkWidget *iconButton)
{
    GtkWidget   *oldImage;
	GtkWidget   *iconIMage;
	oldImage = GTK_WIDGET(gtk_container_children(GTK_CONTAINER(iconButton))->data);
	gtk_object_ref(GTK_OBJECT(oldImage));
    gtk_container_remove(GTK_CONTAINER(iconButton), oldImage);
	g_object_unref(oldImage);
	oldImage = NULL;
	iconIMage = gtk_image_new_from_pixbuf(NULL);
	GtkIconTheme *icon_theme;
    GdkPixbuf    *pixbuf;
    icon_theme = gtk_icon_theme_get_default();
    pixbuf = (name != NULL) ? gtk_icon_theme_load_icon(icon_theme, name,
                                                       40,
                                                       GTK_ICON_LOOKUP_NO_SVG, NULL) : NULL;
    gtk_image_set_from_pixbuf(GTK_IMAGE(iconIMage), pixbuf);
	gtk_container_add(GTK_CONTAINER(iconButton), GTK_WIDGET(iconIMage));
	gtk_widget_show_all(iconButton);
}
void my_button_enter(GtkWidget *button, gpointer user_data)
{
	changeIcon("taskmanager-hi",GTK_WIDGET(button));
} 
void my_button_leave(GtkWidget *button, gpointer user_data)
{
	changeIcon("taskmanager",GTK_WIDGET(button));
} 
/*<<<*************** change icon *****************/

static void on_clicked(GtkWidget *button, gpointer data)
{/*lkcomment点击状态栏上面的taskmanager按钮相应的映射函数,会弹出菜单*/
	GtkWidget *tm_menu;
	/*tm_menu = task_manager_create_menu();*/
	tm_menu = createMenuByTitle();
	gtk_menu_popup(GTK_MENU(tm_menu),
			NULL, NULL,
			task_manager_position_func, NULL,
			0, gtk_get_current_event_time());
}


static void *task_manager_initialize(HildonStatusBarItem *item, GtkWidget **button)
{
	GtkWidget *image = NULL;
    init_charset();/*lkadd*/
	TaskManagerPlugin *tm_plugin = g_new0(TaskManagerPlugin, 1);
	tm_plugin->item = item;
	*button = tm_plugin->button = gtk_button_new();
	gtk_button_set_relief(GTK_BUTTON(*button), GTK_RELIEF_NONE);/*lkcomment表示按钮边缘的一个属性*/

	// image = gtk_image_new_from_icon_name("gnome-window-manager", GTK_ICON_SIZE_MENU);
	image = gtk_image_new_from_file("/usr/local/share/image/taskmanager.png");
	gtk_widget_show(image);
	gtk_container_add(GTK_CONTAINER(*button), image);
	g_signal_connect(G_OBJECT(*button), "clicked",
					 G_CALLBACK(on_clicked), NULL);
	g_signal_connect(G_OBJECT(*button), "enter",
                     G_CALLBACK(my_button_enter), image);
	g_signal_connect(G_OBJECT(*button), "leave",
                     G_CALLBACK(my_button_leave), image);

	gtk_widget_show_all(*button);
	return (void *)tm_plugin;
}


static void task_manager_update(void *data, gint value1, gint value2, const gchar *str)
{
	if (data != NULL)
	{
		TaskManagerPlugin *tm_plugin = (TaskManagerPlugin *) data;
		if (value1 == 0)
			gtk_widget_destroy(GTK_WIDGET(tm_plugin->item));
		else
			gtk_widget_show_all(tm_plugin->button);
	}
}


static void task_manager_destroy(void *data)
{
    if(data != NULL)
    {
      g_free(data);
    }
	if(NULL != client_list)
	{
		g_free(client_list);
		client_list = NULL;
	}
}


void taskmanager_entry(HildonStatusBarPluginFn_st *fn) 
{ 
	if(fn != NULL)
	{ 
		fn->initialize = task_manager_initialize; 
		fn->destroy = task_manager_destroy; 
		fn->update = task_manager_update; 
	}
} 

