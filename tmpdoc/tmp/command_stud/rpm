1.查询已安装软件包的版本，命令为

rpm -qa|grep uxengine

rpm -qa|grep widgetlayouter
2.删除旧包，命令为

rpm -e uxengine-1.7.1-3（输入上面命令的显示内容）

rpm -e widgetlayouter-1.0.5-3（输入上面命令的显示内容）

3.安装新包，命令为

rpm -civh uxengine-1.7.1-4.i386.rpm

rpm -civh widgetlayouter-1.0.5-4.i386.rpm

*安装的时候不检查依赖：
rpm -ivh --nodeps **.rpm


========
*安装软件包，并显示进度和详细信息：
#rpm -ivh <package>.rpm
这里，-i表示安装，-h表示显示进度条，-v表示显示详细信息。这样会将package安装。

*升级软件包：
#rpm -U <newpackage>
这样会将比已经安装的更新版本的newpackage安装。其他的版本会在安装之后被删除。

*强制替换安装：
#rpm -i --force <package>.rpm
这个是从man手册上面查找到的。

*查询软件包的头部相关信息：
# rpm -qpi fvwm-2.5.27-1.i386.rpm
输入之后，输出类似如下：
Name        : fvwm                         Relocations: (not relocatable)
Version     : 2.5.27                            Vendor: (none)
Release     : 1                             Build Date: 2009年03月11日 星期三 00时25分47秒
Install Date: (not installed)               Build Host: www.mevashlim.com
Group       : User Interface/Desktops       Source RPM: fvwm-2.5.27-1.src.rpm
Size        : 8237434                          License: GPL
Signature   : (none)
Packager    : Fvwm Workers <fvwm-workers@fvwm.org>
URL         : http://www.fvwm.org/
Summary     : F(?) Virtual Window Manager
Description :
Fvwm is a powerful ICCCM-compliant multiple virtual desktop window manager
for the X Window System.

This 2.5 version includes new features like full support of the EWMH
(Enhanced Window Manager Hints) specification, internationalization,
improved window decoration code (no flickering anymore), bi-directional
asian text support, FreeType font support (antialiasing), image rendering,
Perl based module library, support for PNG images, side titles and much more.

*查询软件包的文件列表：
# rpm -qpl myapplication-1.0-1.i386.rpm
/etc/myconfig.conf
/usr/bin/myapplication
/usr/lib/libmy.so
/usr/share/doc/myapplication-1.0
/usr/share/doc/myapplication-1.0/Copyright
/usr/share/doc/myapplication-1.0/README
这里，显示的是安装软件将会在哪些目录安装什么文件。






=======有待实践
安装的时候想修改默认路径，则可以：
rpm -ivh --prefix=/opt/usr xxx.rpm 

修改多个路径：
rpm xxx.rpm --relocate=/usr=/opt/usr --relocate=/etc=/usr/etc 

*****创建一个rpm软件包的例子：
man rpmbuild
程序a.out运行的时候依赖libmy.so。
源代码参见。。。

编译好程序之后，运行如下过程可以创建rmp包：
#mkdir rpm_test
#cd rpm_test
#mkdir -p BUILD RPMS/i386
#cp myapplication BUILD
#cp libmy.so BUILD
#touch BUILD/myconfig1.conf
#touch BUILD/myconfig2.conf
#touch BUILD/README
#touch BUILD/Copyright
#vim myapplication.rpm.spec
#


可以通过命令rpm --showrc查看实现代码。另外直接通过 rpm --eval "%{macro}"来查看具体对应路径。
比如我们要查看%{_bindir}的路径，就可以使用命令rpm --eval "%{ _bindir}"来查看。
另外，所有的宏都可以在/usr/lib/rpm/macros里找到。 

rpmbuild {-ba|-bb|-bp|-bc|-bi|-bl|-bs} [rpmbuild-options] SPECFILE ...
rpmbuild {-ta|-tb|-tp|-tc|-ti|-tl|-ts} [rpmbuild-options] TARBALL ...
rpmbuild {--rebuild|--recompile} SOURCEPKG ...
[功能]
创建rpm软件包。

[描述]
rpmbuild可以用来制作二进制或者源码软件包。软件包包含文件以及一些meta-data，可以用来安装或者卸载软件之用。mata-data包含帮助脚本，文件属性以及软件包的其他描述信息。软件包有两种形式：二进制软件包，用来安装软件时候使用（一般就是将已经编译好可以直接运行的程序打包而成）；源码软件包，包含源代码等可以构建二进制软件包的文件。
这个工具有三种必选的基本模式：Build Package, Build Package from Tarball, Recompile Package, Show Configuration.这里重点介绍第一种，也就是构建软件包（rpm包）的模式。
*通用选项：
以下是各种模式下都可以使用的通用选项：
-?, --help
打印帮助信息。
--version
打印单行的，被使用的rpm的版本信息。
--quiet
打印尽可能少的信息，通常只包含错误信息。
-v
打印详细信息，一般都包含处理过程。
-vv
打印尽可能多的信息。
--rcfile FILELIST
依次读取FILELIST中被":"分割的文件用于配置信息。第一个文件必须存在，默认FILELIST是:"/usr/lib/rpm/rpmrc:/usr/lib/rpm/redhat/rpmrc:/etc/rpmrc:~/.rpmrc".
--pipe CMD
将输出通过管道输送给CMD命令。
--dbpath DIRECTORY
使用DIRECTORY中的数据库，而不是默认的"var/lib/rpm"中的数据库。
--root DIRECTORY
使用DIRECTORY做为所有操作的相对的文件系统根目录。注意这也意味着chroot到DIRECTORY之后，DIRECTORY中的数据库被用来做依赖性的检查以及运行一些脚本片段(例如：安装时候的%post，或者编译时候的%prep)。

BUILD模式的选项：
rpm的build命令一般形式为：
rpmbuild -bSTAGE|-tSTAGE [      rpmbuild-options ] FILE ...

如果使用spec文件进行构建，那么使用的为-b参数，如果使用tar文件中的spec文件进行构建，那么使用-t的参数。-b或者-t参数之后的STAGE参数指定了执行构建软件包中的哪个阶段(对应于spec文件中的预处理，构建，安装等各个阶段)。
-ba
构建二进制和源代码包（执行完spec文件中的%prep,%build,和%install阶段之后做）。
-bb
构建二进制包（执行完spec文件中的%prep,%build,和%install阶段之后做）。
-bp
执行spec文件中的"%prep"段中的内容。这个段一般都是用来解压准备生成将要编译的源代码以及应用补丁等时候用的。
-bc
执行spec文件中的"%build"段中的内容(先运行%prep段之后运行)。这个段一般就是相当于进入源代码中，执行"make"，生成可以安装甚至执行的二进制文件。
-bi
执行spec文件中的"%install"段中的内容(先运行%prep,%build段之后运行)。这个段一般就是相当于进入源代码中，执行"make install"，将生成的二进制等文件安装到一个虚拟的根目录中（就是将那个目录当做根目录来看待，那个目录中有usr,etc等根目录中相同的结构），以便后面打包时候使用，以后安装的时候，一般就按照虚拟根目录中的结构将软件安装。
-bl
进行文件列表检查，spec文件的"%files"段是一个宏扩展，这个检查用来确保每个文件是存在的。
-bs    Build just the source package.
只构建生成源码软件包。

下面是一些额外的选项：
--buildroot DIRECTORY
构建软件包的时候，将spec文件中的BuildRoot路径用DIRECTORY来替代（就是指定DIRECTORY为虚拟根目录）。
--clean
制作好软件包之后，清除编译目录。
如果不指定，那么构建好软件包之后，BUILD下还有解压的软件源代码以及编译中间文件。
--nobuild
不执行任何编译阶段的内容，用于测试spec文件。
--rmsource
构建之后，删除源码(可以单独使用，例如 "rpmbuild --rmsource foo.spec")。
--rmspec
构建之后，删除spec文件(可以单独使用，例如 "rpmbuild --rmspec foo.spec")。

另外，命令: "rpmbuild --showrc" 可以显示rpmbuild将要使用的当前rpmrc中设置的所有选项和宏值。

[举例]
**一个简单的测试
这里，对于rpmbuild命令，假设建立一个简单的spec文件myapplication.rpm.spec，对它进行测试。
1)进行之前，查看当前路径以及文件如下：
# pwd
/root/test/rpm_test/BUILD
# ls
Copyright  libmy.so  myapplication  myapplication.rpm.spec  myconfig1.conf  myconfig2.conf  README

2)查看myapplication.rpm.spec文件如下：
#cat myapplication.rpm.spec
#+++++++++以下是文件内容+++++++++++#
######头部######
Summary:一个简单的打印hello的程序
Name:myapplication
Version:1.0  
Release:1  
Vendor:QuietHeart (quiet_heart000@126.com)
License:Share
BuildRoot:%{_tmppath}/%{name}-%{version}-%{release}-root
Group:Applications/Editors  
URL:quietheart.sf.net
Prefix:%{_prefix}
Prefix:%{_sysconfdir}
Prefix:%{_datadir}
Packager:QuietHeart
%description  
描述省略。

######prep,build,install三个段都可以执行shell命令######
# 预处理段，为下一步的编译安装作准备。例如将源代码拷贝到BUILDS目录。
%prep  
#   prep   start.  
echo "======>In :prep section $(pwd)"
#echo "======>In :prep section " %{_topdir}
#echo "======>In :prep section $RPM_BUILD_ROOT"
#echo "======>In :prep section " %{_sourcedir}
#echo "======>In :prep section $RPM_SOURCE_DIR"

# 建立段，执行一些编译命令以便生成软件包。工作于BUILDS。
%build  
#   build   start.
echo "======>In :build section $(pwd)"
#echo "======>In :build section " %{_topdir}
#echo "======>In :build section $RPM_BUILD_ROOT"
#echo "======>In :build section " %{_builddir}
#echo "======>In :build section $RPM_BUILD_DIR"

# 安装段，在安装软件包阶段执行的命令。
# 安装的内容安装到“虚拟根目录中”install是为了后面的file段服务的。
%install  
#   install   start.  
echo "======>In :install section $(pwd)"
#echo "======>In :install section " %{_topdir}
#echo "======>In :install section $RPM_BUILD_ROOT"

######其它的一些段######

#文件段，定义软件包所包含的文件。具体可由后面"%defattr","%doc","%config"宏定义。
#主要包含：config(配置文件),doc(文档文件),bin(二进制文件）
%files

#定义文件属性：%defattr(权限，属主，属组)。其中权限'-'表默认，可用'0777'形式。
%defattr (-,root,root)

#定义制作软件包包含的文档文件，每个宏定义一个，可指定绝对路径。
#一般文档文件会被安装到"/usr/doc/Name-Version-Release"目录下。
%doc   README
%doc   Copyright

#定义软件包所需要的配置文件(还是安装的配置文件位置??)
#当卸载软件的时候会将没有修改过的卸掉，修改过的备份为<name>.rpmsave。
%config   %{_sysconfdir}/myconfig1.conf
%config   %{_sysconfdir}/myconfig2.conf  

#软件包所包含的二进制文件，可以为目录
#%{_bindir}/myapplication
#%{_libdir}/libmy.so

#修改日志段，可以记录每次的修改日志。
#第一行是：*   星期   月   日   年   修改人   电子信箱。
#其中：星期、月份均用英文形式，用中文会出错。
#接下来的行写的应是修改了什么地方，可写多行。一般以减号起始，便于查阅。
#修改的时候，新的必须在上面。
%changelog
*   Fri   Sep   30   2011   QuietHeart
-   增加XXX内容2

*   Fri   Sep   29   2011   QuietHeart
-   增加XXX内容1
#+++++++++以上是文件内容+++++++++++#

3)依次测试常用的rpmbuild命令如下：
*执行myapplication.rpm.spec文件中的prep段：
# rpmbuild -bp myapplication.rpm.spec 
输入之后，输出如下：
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.23258
+ umask 022
+ cd /usr/src/redhat/BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :prep section /usr/src/redhat/BUILD'
======>In :prep section /usr/src/redhat/BUILD
+ exit 0
这里，prep段是编译之前的预处理段，一般都用做将一些类似源代码文件等拷贝到合适的位置，有待编译。由此可知，处理prep的时候，自动将当前路径切换到了"/usr/src/redhat/BUILD"中。

*执行myapplication.rpm.spec文件中的build段：
#rpmbuild -bc myapplication.rpm.spec 
输入之后，输出如下：
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.36144
+ umask 022
+ cd /usr/src/redhat/BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :prep section /usr/src/redhat/BUILD'
======>In :prep section /usr/src/redhat/BUILD
+ exit 0
Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.36144
+ umask 022
+ cd /usr/src/redhat/BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :build section /usr/src/redhat/BUILD'
======>In :build section /usr/src/redhat/BUILD
+ exit 0
这里，build段一般都是执行源代码编译的动作。由这里可见，执行build段之前会先执行prep段。处理build的时候，自动将当前路径切换到了"/usr/src/redhat/BUILD"中。

*执行myapplication.rpm.spec文件中的install段：
# rpmbuild -bi myapplication.rpm.spec
输入之后，输出如下：
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.27835
+ umask 022
+ cd /usr/src/redhat/BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :prep section /usr/src/redhat/BUILD'
======>In :prep section /usr/src/redhat/BUILD
+ exit 0
Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.27835
+ umask 022
+ cd /usr/src/redhat/BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :build section /usr/src/redhat/BUILD'
======>In :build section /usr/src/redhat/BUILD
+ exit 0
Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.27835
+ umask 022
+ cd /usr/src/redhat/BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :install section /usr/src/redhat/BUILD'
======>In :install section /usr/src/redhat/BUILD
+ /usr/lib/rpm/redhat/brp-compress
+ /usr/lib/rpm/redhat/brp-strip /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-static-archive /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
+ /usr/lib/rpm/brp-python-bytecompile
+ /usr/lib/rpm/redhat/brp-java-repack-jars
Processing files: myapplication-1.0-1
error: File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig1.conf
error: File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig2.conf
Executing(%doc): /bin/sh -e /var/tmp/rpm-tmp.88394
+ umask 022
+ cd /usr/src/redhat/BUILD
+ DOCDIR=/var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ export DOCDIR
+ rm -rf /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ /bin/mkdir -p /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr README /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
cp: 无法 stat “README”: 没有那个文件或目录
error: Bad exit status from /var/tmp/rpm-tmp.88394 (%doc)
Checking for unpackaged file(s): /usr/lib/rpm/check-files /var/tmp/myapplication-1.0-1-root


RPM build errors:
    File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig1.conf
    File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig2.conf
    Bad exit status from /var/tmp/rpm-tmp.88394 (%doc)

这里，由于install段建立相应的文件，出现了错误，但是根据错误的提示，我们还是可以知道究竟rpmbuild做了什么的。
install段主要就是为了后面指定的file段服务的，也就是说install段将需要安装的文件安装到虚拟根目录中，然后file段指定被安装到虚拟根目录中的文件。从这里看出，install没有做任何的动作，并且执行install段的时候已经执行了prep段和build段，同时当前路径为'/usr/src/redhat/BUILD'，然后就将install段执行完了。接着，将自动执行file段，根据file段指示的文件以及之前在install段拷贝好的一些文件，以及虚拟根目录myapplication.rpm.spec中的"BuildRoot:%{_tmppath}/%{name}-%{version}-%{release}-root"指定的路径，执行一些动作。另外实践发现，这里使用"rpmbuild -ba myapplication.rpm.spec"以及"rpmbuild -bb myapplication.rpm.spec"所显示的输出一样。如果设置好了，没有出错的话，那么此处就会在虚拟根目录中安装上相应的文件（也就是files指定的文件）。如果使用的是"rpmbuild -bb myapplication.rpm.spec"那么就会继续根据虚拟根目录，制作相应的rpm包，存放在与BUILD目录同级的RPMS下。

*自定义"%{_topdir}"的例子：
[root@lv-k BUILD]# pwd
/root/test/rpm_test/BUILD
[root@lv-k BUILD]# echo %_topdir $(pwd)/../ >~/.rpmmacros
[root@lv-k BUILD]# rpmbuild -bi myapplication.rpm.spec
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.18065
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :prep section /root/test/rpm_test/BUILD'
======>In :prep section /root/test/rpm_test/BUILD
+ exit 0
Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.18065
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :build section /root/test/rpm_test/BUILD'
======>In :build section /root/test/rpm_test/BUILD
+ exit 0
Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.18065
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :install section /root/test/rpm_test/BUILD'
======>In :install section /root/test/rpm_test/BUILD
+ /usr/lib/rpm/redhat/brp-compress
+ /usr/lib/rpm/redhat/brp-strip /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-static-archive /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
+ /usr/lib/rpm/brp-python-bytecompile
+ /usr/lib/rpm/redhat/brp-java-repack-jars
Processing files: myapplication-1.0-1
error: File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig1.conf
error: File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig2.conf
Executing(%doc): /bin/sh -e /var/tmp/rpm-tmp.18065
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ DOCDIR=/var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ export DOCDIR
+ rm -rf /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ /bin/mkdir -p /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr README /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr Copyright /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ exit 0
Checking for unpackaged file(s): /usr/lib/rpm/check-files /var/tmp/myapplication-1.0-1-root


RPM build errors:
    File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig1.conf
    File not found: /var/tmp/myapplication-1.0-1-root/etc/myconfig2.conf
这里，其实前面例子的"/usr/src/redhat"是"%{_topdir}"，类似的变量有很多，不列举了，具体可以查看"/usr/lib/rpm/macros"中的定义。如果修改它，就可以定义rpm默认的build路径，默认为/usr/src/redhat，所以我们这样修改：
"echo %_topdir $(pwd)/../ >~/.rpmmacros"
当然，这假设当前路径为:"/root/test/rpm_test/BUILD"，这样执行prep，build，install等就会在当前路径下进行而不是切换到默认的"/usr/src/redhat/BUILD"了。
**

**一个好用的例子
这里例子将展示把一个编译好的可执行程序打包。
1)查看制作之前的目录结构：
[root@lv-k rpm_test]# pwd
/root/test/rpm_test
[root@lv-k rpm_test]# ls
BUILD  RPMS
[root@lv-k rpm_test]# tree BUILD/ RPMS
BUILD/
|-- COPYRIGHT
|-- Copyright
|-- README
|-- libmy.so
|-- myapplication
|-- myapplication.rpm.spec
`-- myconfig.conf
RPMS
`-- i386
    `-- myapplication-1.0-1.i386.rpm

1 directory, 8 files

2)建立的rpm的spec文件如下：
[root@lv-k rpm_test]# cd BUILD/
[root@lv-k rpm_test]# cat myapplication.rpm.spec
#+++++++++以下是文件内容+++++++++++#
######头部######
Summary:一个简单的打印hello的程序
Name:myapplication
Version:1.0  
Release:1  
Vendor:QuietHeart (quiet_heart000@126.com)
License:Share
BuildRoot:%{_tmppath}/%{name}-%{version}-%{release}-root
Group:Applications/Editors  
URL:quietheart.sf.net
Prefix:%{_prefix}
Prefix:%{_sysconfdir}
Prefix:%{_datadir}
Packager:QuietHeart
%define myconfig myconfig.conf
%define mylib libmy.so
%description  
描述省略。

######prep,build,install三个段都可以执行shell命令######
# 预处理段，为下一步的编译安装作准备。例如将源代码拷贝到BUILDS目录。
%prep  
#   prep   start.  
echo "======>In :prep section $(pwd)"
echo "======>In :prep section " %{_topdir}
echo "======>In :prep section $RPM_BUILD_ROOT"
echo "======>In :prep section " %{_sourcedir}
#echo "======>In :prep section $RPM_SOURCE_DIR"

# 建立段，执行一些编译命令以便生成软件包。工作于BUILDS。
%build  
#   build   start.
echo "======>In :build section $(pwd)"
echo "======>In :build section " %{_topdir}
echo "======>In :build section $RPM_BUILD_ROOT"
echo "======>In :build section " %{_builddir}
#echo "======>In :build section $RPM_BUILD_DIR"
echo "nothing" >>README
echo "By QuietHeart" >>COPYRIGHT

# 安装段，在安装软件包阶段执行的命令。
# 安装的内容安装到“虚拟根目录中”install是为了后面的file段服务的。
%install  
#   install   start.  
echo "======>In :install section $(pwd)"
echo "======>In :install section " %{_topdir}
echo "======>In :install section $RPM_BUILD_ROOT"
mkdir -p $RPM_BUILD_ROOT/usr/bin
mkdir -p $RPM_BUILD_ROOT/usr/lib
mkdir -p $RPM_BUILD_ROOT/etc
#这里使用%{name}表示开始定义的Name，即myapplication。
cp %{name} $RPM_BUILD_ROOT/usr/bin
cp %{mylib} $RPM_BUILD_ROOT/usr/lib
cp %{myconfig} $RPM_BUILD_ROOT/etc

######其它的一些段######
#制作完之后，会执行这里，以便删除例如$RPM_BUILD_ROOT之类的临时文件。
%clean
#   clean   start.  
echo "======>In :clean section $(pwd)"
echo "======>In :clean section $RPM_BUILD_ROOT"
#[ -d $RPM_BUILD_ROOT] && rm -rf $RPM_BUILD_ROOT

#文件段，定义软件包所包含的文件。具体可由后面"%defattr","%doc","%config"宏定义。
#主要包含：config(配置文件),doc(文档文件),bin(二进制文件）
%files
#定义文件属性：%defattr(权限，属主，属组)。其中权限'-'表默认，可用'0777'形式。
%defattr (-,root,root)

#定义制作软件包包含的文档文件，每个宏定义一个，可指定绝对路径。
#一般文档文件会被安装到"/usr/doc/Name-Version-Release"目录下。
%doc   README
%doc   Copyright

#定义软件包所需要的配置文件(还是安装的配置文件位置??)
#当卸载软件的时候会将没有修改过的卸掉，修改过的备份为<name>.rpmsave。
%config   %{_sysconfdir}/%{myconfig}

#软件包所包含的二进制文件，可以为目录
%{_bindir}/%{name}
%{_libdir}/%{mylib}

#修改日志段，可以记录每次的修改日志。
#第一行是：*   星期   月   日   年   修改人   电子信箱。
#其中：星期、月份均用英文形式，用中文会出错。
#接下来的行写的应是修改了什么地方，可写多行。一般以减号起始，便于查阅。
#修改的时候，新的必须在上面。
%changelog
*   Fri   Sep   30   2011   QuietHeart
-   增加XXX内容2

*   Fri   Sep   29   2011   QuietHeart
-   增加XXX内容1
#+++++++++以上是文件内容+++++++++++#

3)制作rpm包：
[root@lv-k BUILD]# echo %_topdir $(pwd)/../ >~/.rpmmacros
[root@lv-k BUILD]# rpmbuild -bb myapplication.rpm.spec
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.35758
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :prep section /root/test/rpm_test/BUILD'
======>In :prep section /root/test/rpm_test/BUILD
+ echo '======>In :prep section ' /root/test/rpm_test/BUILD/../
======>In :prep section  /root/test/rpm_test/BUILD/../
+ echo '======>In :prep section /var/tmp/myapplication-1.0-1-root'
======>In :prep section /var/tmp/myapplication-1.0-1-root
+ echo '======>In :prep section ' /root/test/rpm_test/BUILD/..//SOURCES
======>In :prep section  /root/test/rpm_test/BUILD/..//SOURCES
+ exit 0
Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.35758
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :build section /root/test/rpm_test/BUILD'
======>In :build section /root/test/rpm_test/BUILD
+ echo '======>In :build section ' /root/test/rpm_test/BUILD/../
======>In :build section  /root/test/rpm_test/BUILD/../
+ echo '======>In :build section /var/tmp/myapplication-1.0-1-root'
======>In :build section /var/tmp/myapplication-1.0-1-root
+ echo '======>In :build section ' /root/test/rpm_test/BUILD/..//BUILD
======>In :build section  /root/test/rpm_test/BUILD/..//BUILD
+ echo nothing
+ echo 'By QuietHeart'  
+ exit 0
Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.35758
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :install section /root/test/rpm_test/BUILD'
======>In :install section /root/test/rpm_test/BUILD
+ echo '======>In :install section ' /root/test/rpm_test/BUILD/../
======>In :install section  /root/test/rpm_test/BUILD/../
+ echo '======>In :install section /var/tmp/myapplication-1.0-1-root'
======>In :install section /var/tmp/myapplication-1.0-1-root
+ mkdir -p /var/tmp/myapplication-1.0-1-root/usr/bin
+ mkdir -p /var/tmp/myapplication-1.0-1-root/usr/lib
+ mkdir -p /var/tmp/myapplication-1.0-1-root/etc
+ cp myapplication /var/tmp/myapplication-1.0-1-root/usr/bin
+ cp libmy.so /var/tmp/myapplication-1.0-1-root/usr/lib
+ cp myconfig.conf /var/tmp/myapplication-1.0-1-root/etc
+ /usr/lib/rpm/redhat/brp-compress
+ /usr/lib/rpm/redhat/brp-strip /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-static-archive /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
+ /usr/lib/rpm/brp-python-bytecompile
+ /usr/lib/rpm/redhat/brp-java-repack-jars
Processing files: myapplication-1.0-1
Executing(%doc): /bin/sh -e /var/tmp/rpm-tmp.35758
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ DOCDIR=/var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ export DOCDIR
+ rm -rf /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ /bin/mkdir -p /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr README /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr Copyright /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ exit 0
Provides: config(myapplication) = 1.0-1 libmy.so
Requires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1
Requires: config(myapplication) = 1.0-1 libc.so.6 libc.so.6(GLIBC_2.0) libc.so.6(GLIBC_2.1.3) libgcc_s.so.1 libm.so.6 libmy.so libstdc++.so.6 libstdc++.so.6(CXXABI_1.3) libstdc++.so.6(GLIBCXX_3.4) rtld(GNU_HASH)
Checking for unpackaged file(s): /usr/lib/rpm/check-files /var/tmp/myapplication-1.0-1-root
warning: Could not canonicalize hostname: lv-k.domain.com
Wrote: /root/test/rpm_test/RPMS/i386/myapplication-1.0-1.i386.rpm
Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.13498
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
++ pwd
+ echo '======>In :clean section /root/test/rpm_test/BUILD'
======>In :clean section /root/test/rpm_test/BUILD
+ exit 0

4)查看制作结果：
[root@lv-k BUILD]# tree ../BUILD/ ../RPMS
../BUILD/
|-- COPYRIGHT
|-- Copyright
|-- README
|-- libmy.so
|-- myapplication
|-- myapplication.rpm.spec
`-- myconfig.conf
../RPMS
`-- i386
    `-- myapplication-1.0-1.i386.rpm

1 directory, 8 files
可见，生成的结果在../RPMS/i386之中。

另外，根据spec文件，可知道，在"/var/tmp/myapplication-1.0-1-root/"下还生成一些制作rpm包时候的临时文件，如下：
[root@lv-k BUILD]# tree /var/tmp/myapplication-1.0-1-root/
/var/tmp/myapplication-1.0-1-root/
|-- etc
|   `-- myconfig.conf
`-- usr
    |-- bin
    |   `-- myapplication
    |-- lib
    |   `-- libmy.so
    `-- share
        `-- doc
            `-- myapplication-1.0
                |-- Copyright
                `-- README

7 directories, 5 files
这些文件，可以在spec文件中的clean段里面指定删除。另外还需要注意的是，这里使用rpmbuild的-bb选项，如果使用-ba的话也会报错，如下：
[root@lv-k BUILD]# rpmbuild -ba myapplication.rpm.spec
...前面省略...
======>In :install section /var/tmp/myapplication-1.0-1-root
+ mkdir -p /var/tmp/myapplication-1.0-1-root/usr/bin
+ mkdir -p /var/tmp/myapplication-1.0-1-root/usr/lib
+ mkdir -p /var/tmp/myapplication-1.0-1-root/etc
+ cp myapplication /var/tmp/myapplication-1.0-1-root/usr/bin
+ cp libmy.so /var/tmp/myapplication-1.0-1-root/usr/lib
+ cp myconfig.conf /var/tmp/myapplication-1.0-1-root/etc
+ /usr/lib/rpm/redhat/brp-compress
+ /usr/lib/rpm/redhat/brp-strip /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-static-archive /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
+ /usr/lib/rpm/brp-python-bytecompile
+ /usr/lib/rpm/redhat/brp-java-repack-jars
Processing files: myapplication-1.0-1
Executing(%doc): /bin/sh -e /var/tmp/rpm-tmp.6317
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ DOCDIR=/var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ export DOCDIR
+ rm -rf /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ /bin/mkdir -p /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr README /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr Copyright /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ exit 0
Provides: config(myapplication) = 1.0-1 libmy.so
Requires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1
Requires: config(myapplication) = 1.0-1 libc.so.6 libc.so.6(GLIBC_2.0) libc.so.6(GLIBC_2.1.3) libgcc_s.so.1 libm.so.6 libmy.so libstdc++.so.6 libstdc++.so.6(CXXABI_1.3) libstdc++.so.6(GLIBCXX_3.4) rtld(GNU_HASH)
Checking for unpackaged file(s): /usr/lib/rpm/check-files /var/tmp/myapplication-1.0-1-root
warning: Could not canonicalize hostname: lv-k.domain.com
error: Could not open /root/test/rpm_test/SRPMS/myapplication-1.0-1.src.rpm: 没有那个文件或目录

5)使用制作好的rpm包
*查看软件包头：
[root@lv-k rpm_test]# rpm -qpi ../RPMS/i386/myapplication-1.0-1.i386.rpm 
Name        : myapplication                Relocations: /usr /etc /usr/share 
Version     : 1.0                               Vendor: QuietHeart (quiet_heart000@126.com)
Release     : 1                             Build Date: 2011年10月07日 星期五 14时40分35秒
Install Date: (not installed)               Build Host: lv-k.domain.com
Group       : Applications/Editors          Source RPM: myapplication-1.0-1.src.rpm
Size        : 12504                            License: Share
Signature   : (none)
Packager    : QuietHeart
URL         : quietheart.sf.net
Summary     : 一个简单的打印hello的程序
Description :
描述省略。

*查看软件包的全部文件列表：
[root@lv-k rpm_test]# rpm -qpl ../RPMS/i386/myapplication-1.0-1.i386.rpm
/etc/myconfig.conf
/usr/bin/myapplication
/usr/lib/libmy.so
/usr/share/doc/myapplication-1.0
/usr/share/doc/myapplication-1.0/Copyright
/usr/share/doc/myapplication-1.0/README
这里，显示的就是安装软件将要向哪些目录安装什么文件。

*安装软件：
[root@lv-k rpm_test]# rpm -ivh ../RPMS/i386/myapplication-1.0-1.i386.rpm 
Preparing...                ########################################### [100%]
   1:myapplication          ########################################### [100%]

*查询被安装的软件：
[root@lv-k rpm_test]# rpm -qa |grep myapplication
myapplication-1.0-1

*运行软件：
[root@lv-k rpm_test]# myapplication 
begin test
hello
这里，软件源代码省略，以后会有更详细的讲解。

*卸载软件：
[root@lv-k rpm_test]# rpm -e myapplication-1.0-1

**

**一个较完整的例子
1，最简过程：

2，详细过程：
1)查看文件结构：
[root@lv-k rpm_test]# pwd
/root/test/rpm_test
[root@lv-k rpm_test]# tree
.
|-- BUILD
|-- RPMS
|   `-- i386
|-- SOURCES
|   `-- myapplication-1.0.tgz
|-- SPECS
|   `-- myapplication.rpm.spec
`-- SRPMS

6 directories, 2 files

2)源代码和rpm的spec文件内容：
2.1)源代码文件相关：
假设将SOURCES/myapplication-1.0.tgz解压(实际运行"rpm -bp"的时候就是这样做的，并且解到BUILD供后面的步骤使用)，
#tree myapplication
myapplication-1.0
|-- COPYRIGHT
|-- Makefile
|-- README
|-- lib
|   |-- Makefile
|   |-- myfile.cpp
|   `-- myfile.h
|-- main.cpp
|-- myconfig.conf
`-- myfile.h

1 directory, 9 files
每个文件内容依次如下：
[root@lv-k BUILD]# cat myapplication-1.0/COPYRIGHT
输出如下：
By QuietHeart

[root@lv-k BUILD]# cat myapplication-1.0/Makefile 
输出如下：
myapplication:main.o libmy.so
        g++ main.o -L./lib/ -lmy -o myapplication
main.o:main.cpp
libmy.so:
        make -C ./lib

.PHONY:clean
clean:
        make -C ./lib clean
        rm *.o myapplication

[root@lv-k BUILD]# cat myapplication-1.0/README 
输出如下：
nothing

[root@lv-k BUILD]# cat myapplication-1.0/main.cpp
输出如下：
#include<iostream>
#include "myfile.h"
using std::cout;
using std::endl;
int main(int argc, char *argv[])
{
        cout<<"begin test"<<endl;
        printInfo();
        return 0;
}

[root@lv-k BUILD]# cat myapplication-1.0/myconfig.conf 
输出如下：
configure content

[root@lv-k BUILD]# cat myapplication-1.0/myfile.h 
输出如下：
#ifndef __MYFILE_H
#define __MYFILE_H
void printInfo();
#endif

[root@lv-k BUILD]# cat myapplication-1.0/lib/Makefile 
输出如下：
libmy.so:myfile.o
        g++ -shared -o libmy.so myfile.o
myfile.o:myfile.cpp

.PHONY:clean
clean:
        rm *.so *.o

[root@lv-k BUILD]# cat myapplication-1.0/lib/myfile.cpp 
输出如下：
#include "myfile.h"
#include <iostream>
using std::cout;
using std::endl;
void printInfo()
{
        cout<<"hello"<<endl;
}

[root@lv-k BUILD]# cat myapplication-1.0/lib/myfile.h
输出如下：
#ifndef __MYFILE_H
#define __MYFILE_H
void printInfo();
#endif

2.2)spec文件相关：
[root@lv-k rpm_test]# tree SPECS/
输出如下：
SPECS/
`-- myapplication.rpm.spec

0 directories, 1 file
查看其文件内容如下：
[root@lv-k rpm_test]# cat SPECS/myapplication.rpm.spec
输出如下：
######头部######
Summary:一个简单的打印hello的程序
Name:myapplication
Version:1.0  
Release:1  
Vendor:QuietHeart (quiet_heart000@126.com)
License:Share
SOURCE:%{name}-%{version}.tgz
BuildRoot:%{_tmppath}/%{name}-%{version}-%{release}-root
Group:Applications/Editors  
URL:quietheart.sf.net
Prefix:%{_prefix}
Prefix:%{_sysconfdir}
Prefix:%{_datadir}
Packager:QuietHeart
%define myconfig myconfig.conf
%define mylib libmy.so
%description  
描述省略。

######prep,build,install三个段都可以执行shell命令######
# 预处理段，为下一步的编译安装作准备。例如将源代码拷贝到BUILDS目录。
%prep  
#   prep   start.  
echo "======>In :prep section $(pwd)"
echo "======>In :prep section " %{_topdir}
echo "======>In :prep section $RPM_BUILD_ROOT"
echo "======>In :prep section " %{_sourcedir}
#echo "======>In :prep section $RPM_SOURCE_DIR"
#将源代码包解压并放好，也可以使用tar命令，解压好的目录:%{name}-%{version}，存在BUILD中。
%setup -n %{name}-%{version}
#tar -xzvf %{_sourcedir}/%{name}-%{version}.tgz -C %{_builddir}

# 建立段，执行一些编译命令以便生成软件包。工作于BUILDS。
%build  
#   build   start.
echo "======>In :build section $(pwd)"
echo "======>In :build section " %{_topdir}
echo "======>In :build section $RPM_BUILD_ROOT"
echo "======>In :build section " %{_builddir}
#echo "======>In :build section $RPM_BUILD_DIR"
#自动进入myapplication-1.0中了。
make

# 安装段，在安装软件包阶段执行的命令。
# 安装的内容安装到“虚拟根目录中”install是为了后面的file段服务的。
%install  
#   install   start.  
echo "======>In :install section $(pwd)"
echo "======>In :install section " %{_topdir}
echo "======>In :install section $RPM_BUILD_ROOT"
mkdir -p $RPM_BUILD_ROOT/usr/bin
mkdir -p $RPM_BUILD_ROOT/usr/lib
mkdir -p $RPM_BUILD_ROOT/etc
#这里使用%{name}表示开始定义的Name，即myapplication。
cp %{name} $RPM_BUILD_ROOT/usr/bin
cp lib/%{mylib} $RPM_BUILD_ROOT/usr/lib
cp %{myconfig} $RPM_BUILD_ROOT/etc

######其它的一些段######
%clean
#   clean   start.  
echo "======>In :clean section $(pwd)"

#文件段，定义软件包所包含的文件。具体可由后面"%defattr","%doc","%config"宏定义。
#主要包含：config(配置文件),doc(文档文件),bin(二进制文件）
%files
#定义文件属性：%defattr(权限，属主，属组)。其中权限'-'表默认，可用'0777'形式。
%defattr (-,root,root)

#定义制作软件包包含的文档文件，每个宏定义一个，可指定绝对路径。
#一般文档文件会被安装到"/usr/doc/Name-Version-Release"目录下。
%doc   README
%doc   COPYRIGHT

#定义软件包所需要的配置文件(还是安装的配置文件位置??)
#当卸载软件的时候会将没有修改过的卸掉，修改过的备份为<name>.rpmsave。
%config   %{_sysconfdir}/%{myconfig}

#软件包所包含的二进制文件，可以为目录
%{_bindir}/%{name}
%{_libdir}/%{mylib}

#修改日志段，可以记录每次的修改日志。
#第一行是：*   星期   月   日   年   修改人   电子信箱。
#其中：星期、月份均用英文形式，用中文会出错。
#接下来的行写的应是修改了什么地方，可写多行。一般以减号起始，便于查阅。
#修改的时候，新的必须在上面。
%changelog
*   Fri   Sep   30   2011   QuietHeart
-   增加XXX内容2

*   Fri   Sep   29   2011   QuietHeart
-   增加XXX内容1


3)制作rpm包：
[root@lv-k rpm_test]# echo %_topdir $(pwd) >~/.rpmmacrosmacros
[root@lv-k rpm_test]# rpmbuild -ba SPECS/myapplication.rpm.spec
输入之后，输出如下具体制做过程信息：
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.87076
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :prep section /root/test/rpm_test/BUILD'
======>In :prep section /root/test/rpm_test/BUILD
+ echo '======>In :prep section ' /root/test/rpm_test/BUILD/../
======>In :prep section  /root/test/rpm_test/BUILD/../
+ echo '======>In :prep section /var/tmp/myapplication-1.0-1-root'
======>In :prep section /var/tmp/myapplication-1.0-1-root
+ echo '======>In :prep section ' /root/test/rpm_test/BUILD/..//SOURCES
======>In :prep section  /root/test/rpm_test/BUILD/..//SOURCES
+ cd /root/test/rpm_test/BUILD
+ rm -rf myapplication-1.0 
+ /bin/gzip -dc /root/test/rpm_test/SOURCES/myapplication-1.0.tgz
+ tar -xvvf -
drwxrwxrwx root/root         0 2011-10-07 15:29:19 myapplication-1.0/
-rw-r--r-- root/root        14 2011-10-07 15:28:56 myapplication-1.0/COPYRIGHT
drwxrwxrwx root/root         0 2011-10-07 15:16:34 myapplication-1.0/lib/
-rwxrwxrwx root/root       117 2009-11-21 17:12:18 myapplication-1.0/lib/myfile.cpp
-rwxr-xr-x root/root        63 2011-09-29 18:17:29 myapplication-1.0/lib/myfile.h
-rw-r--r-- root/root       106 2011-10-07 15:16:29 myapplication-1.0/lib/Makefile
-rwxrwxrwx root/root        63 2009-11-21 17:12:18 myapplication-1.0/myfile.h
-rw-r--r-- root/root         8 2011-10-07 15:28:51 myapplication-1.0/README
-rw-r--r-- root/root        18 2011-10-07 15:29:19 myapplication-1.0/myconfig.conf
-rwxrwxrwx root/root      1734 2009-12-10 09:09:06 myapplication-1.0/main.cpp
-rw-r--r-- root/root       178 2011-10-07 15:16:07 myapplication-1.0/Makefile
+ STATUS=0
+ '[' 0 -ne 0 ']'
+ cd myapplication-1.0
++ /usr/bin/id -u
+ '[' 0 = 0 ']'
+ /bin/chown -Rhf root .   
++ /usr/bin/id -u
+ '[' 0 = 0 ']'
+ /bin/chgrp -Rhf root .   
+ /bin/chmod -Rf a+rX,u+w,g-w,o-w .
+ exit 0
Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.87076
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ cd myapplication-1.0
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :build section /root/test/rpm_test/BUILD/myapplication-1.0'
======>In :build section /root/test/rpm_test/BUILD/myapplication-1.0
+ echo '======>In :build section ' /root/test/rpm_test/BUILD/../
======>In :build section  /root/test/rpm_test/BUILD/../
+ echo '======>In :build section /var/tmp/myapplication-1.0-1-root'
======>In :build section /var/tmp/myapplication-1.0-1-root
+ echo '======>In :build section ' /root/test/rpm_test/BUILD/..//BUILD
======>In :build section  /root/test/rpm_test/BUILD/..//BUILD
+ make
g++    -c -o main.o main.cpp
make -C ./lib
make[1]: Entering directory `/root/test/rpm_test/BUILD/myapplication-1.0/lib'
g++    -c -o myfile.o myfile.cpp
g++ -shared -o libmy.so myfile.o
make[1]: Leaving directory `/root/test/rpm_test/BUILD/myapplication-1.0/lib'
g++ main.o -L./lib/ -lmy -o myapplication
+ exit 0
Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.83304
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ cd myapplication-1.0
+ LANG=C
+ export LANG
+ unset DISPLAY
++ pwd
+ echo '======>In :install section /root/test/rpm_test/BUILD/myapplication-1.0'
======>In :install section /root/test/rpm_test/BUILD/myapplication-1.0
+ echo '======>In :install section ' /root/test/rpm_test/BUILD/../
======>In :install section  /root/test/rpm_test/BUILD/../
+ echo '======>In :install section /var/tmp/myapplication-1.0-1-root'
======>In :install section /var/tmp/myapplication-1.0-1-root
+ mkdir -p /var/tmp/myapplication-1.0-1-root/usr/bin
+ mkdir -p /var/tmp/myapplication-1.0-1-root/usr/lib
+ mkdir -p /var/tmp/myapplication-1.0-1-root/etc
+ cp myapplication /var/tmp/myapplication-1.0-1-root/usr/bin
+ cp lib/libmy.so /var/tmp/myapplication-1.0-1-root/usr/lib
+ cp myconfig.conf /var/tmp/myapplication-1.0-1-root/etc
+ /usr/lib/rpm/find-debuginfo.sh /root/test/rpm_test/BUILD/..//BUILD/myapplication-1.0
+ /usr/lib/rpm/redhat/brp-compress
+ /usr/lib/rpm/redhat/brp-strip-static-archive /usr/bin/strip
+ /usr/lib/rpm/redhat/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
+ /usr/lib/rpm/brp-python-bytecompile
+ /usr/lib/rpm/redhat/brp-java-repack-jars
Processing files: myapplication-1.0-1
Executing(%doc): /bin/sh -e /var/tmp/rpm-tmp.83304
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ cd myapplication-1.0
+ DOCDIR=/var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ export DOCDIR
+ rm -rf /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ /bin/mkdir -p /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr README /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ cp -pr COPYRIGHT /var/tmp/myapplication-1.0-1-root/usr/share/doc/myapplication-1.0
+ exit 0
Provides: config(myapplication) = 1.0-1 libmy.so
Requires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1
Requires: config(myapplication) = 1.0-1 libc.so.6 libc.so.6(GLIBC_2.0) libc.so.6(GLIBC_2.1.3) libgcc_s.so.1 libm.so.6 libmy.so libstdc++.so.6 libstdc++.so.6(CXXABI_1.3) libstdc++.so.6(GLIBCXX_3.4) rtld(GNU_HASH)
Processing files: myapplication-debuginfo-1.0-1
Provides: libmy.so.debug   
Requires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1
Checking for unpackaged file(s): /usr/lib/rpm/check-files /var/tmp/myapplication-1.0-1-root
warning: Could not canonicalize hostname: lv-k.domain.com
Wrote: /root/test/rpm_test/SRPMS/myapplication-1.0-1.src.rpm
Wrote: /root/test/rpm_test/RPMS/i386/myapplication-1.0-1.i386.rpm
Wrote: /root/test/rpm_test/RPMS/i386/myapplication-debuginfo-1.0-1.i386.rpm
Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.76622
+ umask 022
+ cd /root/test/rpm_test/BUILD/..//BUILD
+ cd myapplication-1.0
++ pwd
+ echo '======>In :clean section /root/test/rpm_test/BUILD/myapplication-1.0'
======>In :clean section /root/test/rpm_test/BUILD/myapplication-1.0
+ exit 0

4)查看生成的文件：
[root@lv-k rpm_test]# tree
.
|-- BUILD
|   `-- myapplication-1.0
|       |-- COPYRIGHT
|       |-- Makefile
|       |-- README
|       |-- debugfiles.list
|       |-- debuglinks.list
|       |-- debugsources.list
|       |-- lib
|       |   |-- Makefile
|       |   |-- libmy.so
|       |   |-- myfile.cpp
|       |   |-- myfile.h
|       |   `-- myfile.o
|       |-- main.cpp
|       |-- main.o
|       |-- myapplication
|       |-- myconfig.conf
|       `-- myfile.h
|-- RPMS
|   `-- i386
|       |-- myapplication-1.0-1.i386.rpm
|       `-- myapplication-debuginfo-1.0-1.i386.rpm
|-- SOURCES
|   `-- myapplication-1.0.tgz
|-- SPECS
|   `-- myapplication.rpm.spec
`-- SRPMS
    `-- myapplication-1.0-1.src.rpm

8 directories, 21 files
由上面可见，生成的文件分别是：
BUILD/myapplication-1.0目录，在prep段指定的命令中解压SOURCES目录中的内容生成。
RPMS/i386/*.rpm，制作后期二进制rpm包生成。（可以用"rpmbuild -bb"单独生成这个）。
SRPMS/*.rpm，制作后期源码rpm包生成。（可以用"rpmbuild -bs"单独生成这个）。

5)使用制作的rpm包：
*查看软件包头：
Name        : myapplication                Relocations: /usr /etc /usr/share 
Version     : 1.0                               Vendor: QuietHeart (quiet_heart000@126.com)
Release     : 1                             Build Date: 2011年10月07日 星期五 16时13分09秒
Install Date: (not installed)               Build Host: lv-k.domain.com
Group       : Applications/Editors          Source RPM: myapplication-1.0-1.src.rpm
Size        : 12580                            License: Share
Signature   : (none)
Packager    : QuietHeart
URL         : quietheart.sf.net
Summary     : 一个简单的打印hello的程序
Description :
描述省略。

*查看软件包的全部文件列表：
[root@lv-k rpm_test]# rpm -qpl RPMS/i386/myapplication-1.0-1.i386.rpm
/etc/myconfig.conf
/usr/bin/myapplication
/usr/lib/libmy.so
/usr/share/doc/myapplication-1.0
/usr/share/doc/myapplication-1.0/COPYRIGHT
/usr/share/doc/myapplication-1.0/README
这里，显示的就是安装软件将要向哪些目录安装什么文件。

*安装软件：
[root@lv-k rpm_test]# rpm -ivh RPMS/i386/myapplication-1.0-1.i386.rpm 
Preparing...                ########################################### [100%]
   1:myapplication          ########################################### [100%]

*查询被安装的软件：
[root@lv-k rpm_test]# rpm -qa |grep myapplication
myapplication-1.0-1

*运行软件：
[root@lv-k rpm_test]# myapplication 
begin test
hello
这里，软件源代码省略，以后会有更详细的讲解。

*卸载软件：
[root@lv-k rpm_test]# rpm -e myapplication-1.0-1

*查看源码包头：
[root@lv-k rpm_test]# rpm -qpi SRPMS/myapplication-1.0-1.src.rpm 
Name        : myapplication                Relocations: (not relocatable)
Version     : 1.0                               Vendor: QuietHeart (quiet_heart000@126.com)
Release     : 1                             Build Date: 2011年10月07日 星期五 16时13分09秒
Install Date: (not installed)               Build Host: lv-k.domain.com
Group       : Applications/Editors          Source RPM: (none)
Size        : 5084                             License: Share
Signature   : (none)
Packager    : QuietHeart
URL         : quietheart.sf.net
Summary     : 一个简单的打印hello的程序
Description :
描述省略。

*查看源码包文件列表：
[root@lv-k rpm_test]# rpm -qpi SRPMS/myapplication-1.0-1.src.rpm 
myapplication-1.0.tgz
myapplication.rpm.spec

*安装源码包:
[root@lv-k rpm_test]# rpm -ivh SRPMS/myapplication-1.0-1.src.rpm 
   1:myapplication          ########################################### [100%]

*查看刚刚的安装：
[root@lv-k rpm_test]# rpm -qa |grep myapplication
这里，看不出来，究竟安装到了哪里。但是实际上，是安装到了SOURCES中和SPECS中了，如果将SOURCES和SPECS中原来的删掉，再安装，就能够看出来了。
**

参考资料:
http://fedoraproject.org/wiki/Packaging/RPMMacros#RPM_directory_macros
http://oa.jmu.edu.cn/netoa/libq/pubdisc.nsf/66175841be38919248256e35005f4497/ba6fbec275186d5d4825709100163428?OpenDocument
*****
