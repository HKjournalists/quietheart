svn的基本命令不用说了，svn基本作用就是集中管理代码，也不用说了。

一、基本概念
高效使用svn的关键之一是要理解svn中分支和合并的概念。
所谓分支，
就是一个拷贝，可以对库内任意子目录进行拷贝，然后在于主线互不影响的前提下对这个拷贝进行任意修改，需要的时候可以把任意两个时间之内的修改合并到主线上。
主要注意的是：
（１）客户端检出的时候，可以把检出的分支当做独立的svn库来开发，不会影响开发主线。分支和主线为一共享的就是版本号，以及分支之前的开发日志。
（２）分支拷贝，是廉价的拷贝，它只保存创建分支以来修改的内容（却可以当做独立的库来看待）。不用的分支完全可以删除，也可在任何时候找回。

所谓合并，
就是把某个分支（或者主干上），某个期间进行的修改动作（即两个版本号之间相对于该分支上的修改），应用到任意分支（或者主线）上，应用的结果变成了新的版本。
需要注意的是：
（１）合并的时候，要保证本次合并的内容和其他人合并的内容没有冲突。如果开发前安排每个开发人员所做的修改完全是在他们自己独立的模块中的修改的话，就不会出现交叉修改的情况，也不会有冲突。svn提供的机制，可以实现冲突可以在合并之前检查出来，也可以在发生冲突之后解决。
（２）合并的时候，最好记录本次应用的是合并操作，这样可以防止多次合并同一个动作。


二、典型案例
举一个例子，假设项目sony进行svn管理。
１，现在的管理状况是：
1.1,svn库的分部情况如下：
１）建立一个用于release的svn库（本地）。
２）建立一个用于develop的svn库（本地）。
３）有一个对客户的release库（在客户的主机上）。

1.2,使用这个体系，开发的过程大致如下：
１）平时开发的时候，一切动作都在develop库上面做。
２）发布的时候，各个模块组手动把develop库上面的验证好用的修改动作“复制”到本地release库上面。
３）release担当手动把各个模块放到本地release库上面的本次修改动作，再次“复制”到客户的release库上面。
４）为了保持本地develop库和本地release库严格一致（以便以后发布时差异太大不好复制），release担当还要对比着把本地release库“回盖”到本地develop库。

1.3,问题是：
２）这个步骤手动做，工作量比较大，容易出错，容易导致遗漏（有遗漏才会增加４）这个步骤防止不一致性）。
３）这个步骤需要复制到客户release上面，工作量也不小，也许是不可避免的。
４）这个步骤完全是为了防止２）这个步骤会导致develop库与release库不一致，额外增加的，工作量也不小，且它本身也容易出错。
另外，需要维护多个独立的svn库，占据不少的空间，还不方便跟踪历史记录。


２，改进的方案：
2.1,svn库的分部情况如下：
１）建立一个svn库，其开发的主线（trunk）就等价于前面的本地release库。（本地）
２）为svn库建立一个分支，例如(branches/develop)，其作用就相当于前面的本地develop库。（本地）
３）建立一个对客户的release库（在客户的主机上，这一点和前面不变）

2.2,使用改进的方案，开发的大致过程如下：
１）平时开发的时候，都从分支branches/develop上面导出代码，然后每个组基于这个本地develop分支进行开发。
２）发布的时候，各个模块组把develop分支上的相对trunk主线的修改“merge“到trunk上。
３）release担当手动把各个模块放到trunk主线上面的本次修改动作再“复制”到客户的svn上面。
４）这个步骤是可选的，为了保持develop库和release库严格一致，可以把brahches/develop删掉，然后再给trunk主线重新创建一个新的branches/develop分支。

2.3,改进之处是：
２）这个步骤，如果每个模块修改的地方相互独立，那么完全可以自动化地merge到trunk上；如果相互重叠，也容易查出哪里修改重叠了，并且相应手动修改（手动修改的内容很少）。
３）这个步骤仍然不可避免。
４）这个步骤，也不用release担当动做了，当２）这个步骤做完，担当可以什么都不用管（或者只检查一下即可），让以后继续再这个develop分支上面开发；如果不确定，担当完全可以删掉这个develop分支，重新给trunk创建一个develop分支。
另外，
只需要维护一个svn库，便于历史跟踪，或者创建其他分支等管理动作。
这里，根据分支的概念，每次开发者从分支检出的代码可以完全想以前一样当做独立的开发库来看待，绝对不会影响release开发主线的代码。
虽然可能会创建不少分支，但是由于svn内部的实现机制，这些分支本身几乎不会占用空间,比使用本地release库和本地develop库，两个独立的开发库省下不少空间。
完全保留了所有的历史记录（包括可以找出曾经删除的分支）,便于跟踪。
以上绝大多数所有动作，svn都有专有的命令来实现，同时也可以选择自己手动进行。
