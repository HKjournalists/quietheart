主要内容：
基本语法
常用选项
常用命令
其它
问题

基本语法
===========
Makefile由规则构成。一个规则语法形式如下：
target:[depend1 depend2 ...]
	[command]
可见，规则由：目标(target)，依赖(depend1 depend2)，和命令(command)组成。
其中，目标可以是存在的文件，或不存在的文件，依赖可以是其它规则的目标。

常用选项
===========
-e
	使用系统环境变量的定义覆盖Makefile中的同名变量定义.注意，系统环境变量是系统的，和make环境变量（make进程执行时候有效）相对,默认系统环境变量被同名make环境变量替换掉，另外命令行中定义的make环境变量会替换makefile定义的make环境变量。

-I DIR
--include-dir=DIR
     指定被包含makefile文件的搜索目录。在Makefile中出现“include”另外一个文件时，将在“DIR”目录下搜索。多个“-I”指定目录时，搜索目录按照指定顺序进行。

 -w, --print-directory
	在进行其他的处理之前打印工作目录的信息。有利于跟踪复杂的递归的make的错误定位。

--no-print-directory
	关闭-w选项。

-r, --no-builtin-rules
	取消所有的Make内嵌隐含规则。不会取消隐含变量。也会清空隐含后缀链表。

-R, --no-builtin-variables
	取消所有的隐含变量（同时也取消隐含规则）.

-t
--touch
	更新目标时间戳，对目标的文件进行touch。但是不执行规则中的命令。

-n
--dry-run
	只打印命令，并不执行。

-q
--question
不运行任何命令，也不打印任何东西，只返回一个0或者非0的退出码来表示指定的目标是否最新。

-f file
使用指定的file做为make而不是默认的文件名称。


常用命令
===========
这里，我只给出比较重要的，并且本人觉的需要特别记忆的部分，其他的就看info make或者网上下载makefile中文手册等。
*读取makefile并且编译：
$make
会依次寻找:GNUmakefile,makefile,Makefile三者，找到就以找到的做为输入文件执行，如果全没有则寻找下一个。

*无条件的make所有的目标：
$make -B
通常，make都是根据依赖文件的时间戳来进行make的，使用这个选项会无条件地不管时间戳的执行make。

*指定多个任务并发执行：
$make -j2
这里，用-j选项指定了2个任务并发执行。如果指定了多个-j那么最后一个起作用，如果-j没有指定参数，那么不会限制并发执行的任务的数目。例如当机器是4核的cpu的时候，使用"make -j4"会快很多。
例如本来机器是双核的，那么：
a)不使用-jN进行make：
Time is :2011年 12月 31日 星期六 17:35:50 CST--2011年 12月 31日 星期六 17:40:07 CST
b)使用-j2进行make：
Time is :2011年 12月 31日 星期六 17:58:30 CST--2011年 12月 31日 星期六 18:00:49 CST
c)使用-j4进行make：
Time is :2011年 12月 31日 星期六 18:02:12 CST--2011年 12月 31日 星期六 18:04:38 CST
可见，使用-jN会加快make的速度，N大于实际cpu核数的话就采用最大实际核数。

其它
===========
******未整理
基本语法
终极目标
规则变量
makefile变量


一些原理：
----------
**关于终极目标;
	所谓终极目标就是make最终所要重建的、Makefile中某个规则的目标（也可以称之为“最终规则”。）为了完成对终极目标的重建，可能会触发它的依赖或者依赖的依赖文件被重建的过程。
	默认情况下，终极目标就是出现在Makefile中，除了以点号“.” 开始的第一个规则中的第一个目标（如果第一个规则存在多个目标)  如果在Makefile中的第一个规则有多个目标，那么默认的终极目标是多个目标中的第一个。在Makefile所在的目录下执行“make”时，将完成对默认终极目标的重建。 另外，也可以通过命令行将一个 Makefile 中的目标指定为此次 make 过程的终极目标，而不是默认的终极目标。如："make clean"，可以把这个"clean"目标指定为终极目标。使用这种方式，我们也可以同时指定多个多个终极目标。make 执行时设置一个特殊变量"MAKECMDGOALS"，此变量记录了命令行参数指定的终极目标列表，没有通过参数指定终极目标时此变量为空。

**关于规则的自动化变量：
$@ 表示当前规则的目标
$< 表示当前规则的第一个依赖
$? 表示规则的依赖文件中被改过的文件
$^ 表示规则的所有依赖文件列表，使用空格分隔。去掉重复的依赖文件。
$+ 类似"$^"，但是它保留了依赖文件中重复出现的文件。


另外，由于shell 变量$$表示当前进程PID，那么在make的命令中应该用$$$$来表示。
**

另外CFLAGS变量，向里面追加东西的时候，使用:
test.o:test.c
这样的隐含规则，会使用CFLAGS的内容。
但是，使用:
test:test.c
	gcc test.c -o test
这样的方式显示指定，那么编译的时候就不会使用CFLAGS中的内容了。
一个测试的简单方法：写个hello程序"main.cpp",然后用"make CXXFLAGS+=-DMYMACRO"即可知道。这里，CPPFLAGS和CXXFLAGS都行，它们是g++的flags.

变量"MAKEFLAGS",用于make递归调用时传递命令行选项。最上层（可以称之为主控）make 的命令行选项“-k”“-s”等,被自动的通过环境变量“MAKEFLAGS”传递给子 make 进程。

**一些有用的变量：
*变量引用：
Makefile变量用"${var}"或"$(var)"的形式，不用括号则无法正确引用多字符，例如"$var"变成了"$v"; 而shell中用"$var"或${HOME}来引用。
make 规则中的命令，其中使用的是shell的变量，所以用$var方式引用，但是也可用"${var}"或"$(var)"来在shell规则中引用make定义的变量，但是由于'$'在make中有特殊含义，所以用'$$'来表示引用变量的'$'。(所以用"${}"是偷懒的做法^_^。)
例如用如下方式来引用主目录：
#####
MYHOME1=$$HOME
MYHOME2=${HOME}
default:
	@echo ${MYHOME1} #ok,make var
	@echo ${MYHOME2} #ok,make var
	@echo $$MYHOME2  #bad,null
	@echo ${HOME}    #ok, 
	@echo $(HOME)	 #ok,
	@echo $$HOME     #ok, shell var
#####

*VPATH变量:
make使用VPATH做为搜索路径，如果目标和依赖所指定的文件没有在当前路径中，那么make就会从VPATH所列出的路径中搜索那个文件名称，VPATH中的每个目录路径以":"或者空格分隔。具体参见"info make --index-search=VPATH".

MAKEFILE_LIST变量：
make读取的各种文件来自"MAKEFILE_LIST",命令行指定，默认文件，或者从include来的，这些文件名字会在调用make之前被自动地追加到MAKEFILE_LIST变量后面。
例如当前文件名称是:Makefile,如果开始执行如下操作：
name1 := $(lastword $(MAKEFILE_LIST))
include inc.mk
name2 := $(lastword $(MAKEFILE_LIST))
那么name1为"Makefile",name2为"inc.mk".

MAKE变量:
在使用make进行递归调用的时候应当使用变量MAKE来替代直接使用make。例如：
subsystem:
	cd subdir && $(MAKE)
这样的好处是当我们使用多个版本的make的时候，可以保证上层的make和下层的make是同样的程序。
另外它还会使得make的-t,-q,-n选项属性改变。比如当我们想要更新包括子目录的所有的目标的时间戳，所以使用选项-t和递归调用，以上面的片段为例子，当使用make的时候，-t导致子make的"cd subdir && make"不会被调用而却创建了一个subsystem目标文件（因为是touch了），没有执行子make，所以子目录中的文件没有被touch；而使用$(MAKE)的时候，-t会执行"cd subdir && $(MAKE)"，不会创建subsystem，实现了递归更新时间戳。也就是说，-t,-n,-q虽然一般不执行规则命令，但是对使用$(MAKE)的规则命令，是执行的，并且将上层make的命令选项通过MAKEFLAGS传递给下层。
**

**关于"?="操作符
这个是条件赋值,表示：只有此变量在之前没有赋值的情况下才会对这个变量进行赋值。
例如:FOO ?= bar
其等价于：
   ifeq ($(origin FOO), undefined)
        FOO = bar
   endif
含义是：如果变量“FOO”在没有定义过，就给它赋值“bar”。否则不改变它的值。这里的origin函数会返回变量的一些属性信息，例如变量来自命令行还是makefile中的定义等等。
**

**关于"="定义变量或者":="定义变量
1)使用"="定义的变量，是在引用的时候对所有变量递归地展开，而定义的时候不会展开"="右面的变量，这样可以在变量定义时"="后面引用之前没有定义的变量,(变量引用的时候可以吗？)但是需要小心自引用导致的无限递归。
实践发现，如下的makefile也可以打印出hello。
#######测试引用没有定义的变量
all:
    @echo ${TEST1}
TEST1=${TEST2}
TEST2=hello
#######

2)使用":="定义的变量，是在定义的时候对所有引用变量都直接展开了，所以不能在变量定义的时候引用之前没有定义的变量。
实践发现，如下的makefile不能打印出hello。
#######测试引用没有定义的变量
all:
    @echo ${TEST1}
TEST1:=${TEST2}
TEST2=hello
#######

**

**变量高级使用
变量替换：
$(VAR:A=B)或者${VAR:A=B}，表示对VAR中所有的以A字符结尾的字替换成以B字符结尾的字，结尾的含义是空格之前。
例如：
foo := a.o b.o c.o
bar := $(foo:.o=.c)
变量“bar”的值就为“a.c b.c c.c”。
更为通用的方式： 
foo := a.o b.o c.o
bar := $(foo:%.o=%.c)
替换之后，bar为"a.c b.c c.c"。

变量导出：
当上层 make 过程要将所执行的 Makefile 中的变量传递给子 make 过程时，需要明确地指出。在 GNU make 中，实现此功能的指示符是“export”。当一个变量使用“export”进行声明后，变量和变量的值将被加入到当前工作的环境变量中，以后 make 所执行的所有规则的命令都可以使用这个变量。而当没有使用指示符“export”对任何变量进行声明的情况下，上层 make 只将那些已经初始化的环境变量（在执行 make 之前已经存在的环境变量)和使用命令行指定的变量（如命令 make CFLAGS +=-g”或“make -e CFLAGS +=-g”）传递给子 make 程序，通常这些变量由字符、数字和下划线组成。

**

**一些函数
call函数：
这个函数用于创建一个参数化的函数（变量）,你可以写一个非常复杂的表达式来表达这个变量，然后通过call可以给变量赋予不同的值。例如：
例如：
reverse = $(2) $(1)
foo = $(call reverse,a,b)
这样之后，foo的值变成了'b a'.
具体参见make的手册。

strip函数：
去掉前后空白，并将中间空白合并为一个。
例如：
STR=   a   b  c
LOSTR=$(strip $(STR))
这样，LOSTR为"a b c"。

filter函数：
格式：$(filter pattern...,text)
过滤，只留下text中符合pattern模式的单词，pattern一般包含模式字符"%"，多个模式用空格分隔。
例如：
files = foo.c a.h bar.c a.s
src = $(filter %.c %.s, $(files))
这样，src为："foo.c bar.c a.s"

shell函数
这里$(shell...)是一个make的函数，用于执行shell命令。
例如执行shell命令赋值Makefile变量用如下形式：
MYVAR := $(shell echo myvalue)

wildcard函数
格式：$(wildcard PATTERN)
获取匹配模式文件名。列出当前目录所有符合模式"PATTERN"的文件名。
返回空格分割的符合"PATTERN"的当前目录下的文件名。
例如：
$(wildcard *.c)
返回当前目录所有".c"源文件列表，不包含子目录。

foreach函数
格式：$(foreach VAR,LIST,TEXT)
循环，把LIST中使用空格分割的单词依次取出放入VAR，然后执行TEXT。
返回空格分割的多个表达式。
例如：
dirs:=a b c d
files:=$(foreach dir, $(dirs), $(wildcard $(dir)/*))
执行之后，files为所有dir下的文件（非递归）。

patsubst函数
格式:$(patsubst PATTERN,REPLACEMENT,TEXT)
模式替换函数，搜索空格分开的TEXT中符合模式"PATTERN"的单词，将其替换为"REPLACEMENT"。参数"PATTERN"中用"%"表示一个单词的若干字符。若"REPLACEMENT"中也有"%"，则其表示"PATTERN"中的那个，并且只这样处理第一个"%"，后面的不做这样处理，可以用转义"\"取消第一个"%"的含义。
返回替换后的新字符串。
例如：
$(patsubst %.c,%.o, x.c.c bar.c)
返回："x.c.o bar.o"

notdir函数
格式：$(notdir NAMES...)
取文件名部分。
例如：
$(notidr src/foo.c hacks)
返回"foo.c hacks"
缺陷：如果NAMES存在以反斜线结尾的文件，则反斜线替换成空串。

**

**Makefile“include”“-include”“sinclude”区别
-include FILENAMES...

使用这种方式时，当所要包含的文件不存在时不会有错误提示、make也不会退出；除此之外，和第一种方式效果相同。以下是这两种方式的比较：

使用“include FILENAMES...”，make程序处理时，如果“FILENAMES”列表中的任何一个文件不能正常读取而且不存在一个创建此文件的规则时make程序将会提示错误并退出。

使用“-include FILENAMES...”的情况是，当所包含的文件不存在或者不存在一个规则去创建它，make程序会继续执行，只有真正由于不能正确完成终极目标的重建时（某些必需的目标无法在当前已读取的makefile文件内容中找到正确的重建规则），才会提示致命错误并退出。

为了和其它的make程序进行兼容。也可以使用“sinclude”来代替“-include”（GNU所支持的方式）。
**

帮助手册：
===========
info make

杂乱
===========
*条件执行
rpm:
	if [ -f ~/.rmpmacros ];then mv -f ~/.rpmmacros ~/.rpmmacros.bak ;fi
或者
rpm:
	@[ -f ~/.rpmmacros ] && echo good || :
第二个要有"|| :"，否则当条件不成立的时候，会报错。

*注释：
xxx:
	#xxx
	@echo good
这样会在执行make时候显示注释，然后显示good。如果也想隐藏注释，那么：
xxx:
	@#xxx
	@echo good

*变量的问题：
make中的变量如果是单个字符，那么可以"$X"方式引用，但是多个字符就需要用"${xxx}"或者"${xxx}"引用了；shell的都可以用"$xxx"或"${xxx}"方式引用。一般使用shell中的变量，采用"$XXX"形式，而make变量（make中定义或者make的环境变量）采用$(xxx)形式。（因此，在makefile中引用shell变量形式变成："$$XXX"）。
#######以下是Makefile内容
all:
    @cd mydir && pwd
    @cd mydir && echo $(PWD)
    @cd mydir && echo $$PWD
#######以上是Makefile内容
这样的makefile将会打印出类似如下的输出：
[root@quietheart make]# make
/root/test/make/mydir
/root/test/make
/root/test/make/mydir
这里，需要注意的是，当前路径变量"PWD"，对于shell和make来说，其值不一样。

*条件分支：
对于makefile，在规则命令中写shell的分支容易出错，可以这样：
#######以下是Makefile内容
  1 all:
  2     @cd mydir && pwd
  3     @cd mydir && echo $(PWD)
  4     @cd mydir && echo $$PWD
  5     @cd mydir && ./myset.sh
  6     @[ -f testfile ] && echo have good! || cd mydir && ./myset.sh
  7     @#[ -f good ] && echo have good! || cd mydir && ./myset.sh
  8     @if [ -f good ];then \
  9         echo have good! \
 10         ;echo have good! \
 11     ;else\
 12         cd mydir && ./myset.sh \
 13     ;fi
 14     @if [ -f testfile ];then \
 15         echo have good! \
 16     ;else\
 17         cd mydir && ./myset.sh \
 18     ;fi
 19     @[ -f good ] && echo good
 20     @[ -f testfile ] && echo good || :
#######以上是Makefile内容
运行以上makefile输出如下：
[root@quietheart make]# make
/root/test/make/mydir
/root/test/make
/root/test/make/mydir
hello!
hello!
have good!
have good!
hello!
good
这里，假设当前文件下实际有"good"没有"testfile"。需要注意的是，
第7行是错误的逻辑，在good存在的时候会提示找不到./myset.sh命令，所以用8-12行的if方式修正了。
第10行表示在一个分支中使用多条命令的话，需要以';'开始，否则由于续行表示与上面在一行，成了上一个命令参数了。
第19行实际是不正确的写法，尽管因为存在"good"，所以正确地输出了，但是如果没有"good"将会报错！
第20行，修正了18行的写法，当没有"testfile"文件时，执行"||"后面的":"也就是空命令。如果没有"||:"这里就会报错。




===========
make -C 之后，好象子make的路径还是原来的。

Makefile中的规则命令，每行对应不用的shell，所一cd命令不管用，如果想用cd，那么就把命令放在一行。

Makefile中的include，设置的$(PWD)也是主文件中的，例如：
主文件：
##############
include src1/src1.make
include src2/src2.make

CUR_DIR_MAKE  = $(PWD)

default:
	@echo ${CUR_DIR_MAKE}
	@echo ${CUR_DIR_SRC1}
	@echo ${CUR_DIR_SRC2}
##############

" ${CUR_DIR_MAKE}  ${CUR_DIR_SRC1}  ${CUR_DIR_SRC2}"三者分别用$(PWD)定义在主文件,src1.make和src2.make中，但是值却是一样的，全是主文件的路径。


问题
===========
多规则的问题
