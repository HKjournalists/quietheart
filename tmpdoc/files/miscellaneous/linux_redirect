http://www.ibm.com/developerworks/cn/linux/l-iotips/
技巧：Linux I/O重定向的一些小技巧

首先说一下什么是I/O重定向，所谓I/O重定向简单来说就是一个过程，这个过程捕捉一个文件，或者命令，程序，脚本，甚至脚本中的代码块（code block）的输出，然后把捕捉到的输出，作为输入发送给另外一个文件，命令，程序，或者脚本。

如果谈到I/O重定向，就涉及到文件标识符(File Descriptor)的概念, 在Linux系统中，系统为每一个打开的文件指定一个文件标识符以便系统对文件进行跟踪，这里有些和C语言编程里的文件句柄相似，文件标识符是一个数字，不同数字代表不同的含义，默认情况下，系统占用了3个，分别是0标准输入（stdin）,1标准输出(stdout), 2标准错误(stderr), 另外3-9是保留的标识符，可以把这些标识符指定成标准输入，输出或者错误作为临时连接。通常这样可以解决很多复杂的重定向请求。

标准输入通常指键盘的输入
标准输出通常指显示器的输出
标准错误通常也是定向到显示器

请看以下例子，来描述一下他们的关系

#ls /dev


这个命令列出/dev目录下的所有文件，在屏幕上输出结果。

这里 /dev 就是作为命令ls的标准输入（从键盘输入），而打印在屏幕的结果就是标准输出（/dev目录中的内容）

还是回到标题，重定向就是把标准的输入或者输出更改成其他的方式，请参看如下例子
或者等同于

#ls /dev 1>filename                                  #注意："1"和">"中间没有空格


以上命令会把命令的标准输出重新定向到一个文件filename,而不是显示到屏幕上，如果不指明文件标识符，系统默认的就是1, 因此1可以省略

如果把上面例子重的">"改成">>"则表示把输出追加到filename文件的末尾，如果文件不存在则创建它。如下

#ls /dev >>filename


也可以把标准错误重新定向到文件

#ls -qw  /dev  2>filename


显然 -qw是一个错误参数，通常会在显示器上报告一个错误信息，但由于把2标准错误（stderr）重新定向到了文件filename，因此显示器没有错误信息，而信息写到了文件里面

以下命令是把标准输出和错误都定向到文件

#ls /dev &>filename


"&"在这里代表标准输出和标准错误，这里无论是正常输出还是错误信息都写到filename中了。

重新定义标准输入，输出，和错误的文件标识符

重新定义文件标识符可以用i>&j命令，表示把文件标识符i重新定向到j，你可以把"&"理解为"取地址"

请看以下例子

#exec 5>&1


表示把文件标识符5定向到标准输出，这个命令通常用来临时保存标准输入。

同样标准输入也是可以重新定向的，请参考下面例子

# grep search-word <filename或者grep search-word 0<filename


一般来说grep命令在给定文件中搜索字符串，以上命令把文件filename作为grep命令的标准输入，而不是从键盘输入。

前面曾经提到，系统为每一个打开的文件指定一个文件标识符以便系统对文件进行跟踪，那么默认的文件标识符是什么呢？答案是0，也就是标准输入，或者可以说从键盘输入。当然这个文件标识符也可以自己指定，请参考下面例子

#echo 123456789 >filename   把字符串写到文件filename中
#exec 3<>filename           把文件filename打开，并指定文件标识符为3
#read -n 4 <&3              从文件中读4个字符，句柄已经指到第四个字符末尾
#echo -n . >&3              在第5个字符处写一个点，覆盖第5个字符，-n表示不换行
#exec 3>&-	          关闭文件标识符3


现在cat filename文件的结果就成了1234.6789

命令j<>filename表示把文件打开，并指明文件标识符为j
"&-"表示关闭文件标识符

有关关闭文件标识符的操作请参考下面

n<&- 关闭输入文件标识符n
0<&-或<&- 关闭标准输入stdin
n>&- 关闭输出文件标识符n
1>&-或>&-关闭标准输出stdout


另外还有一些其他命令，如下参考

2.	：> filename 或者 > filename


表示把文件filename设置成空，也就是清空文件内容，如果文件不存在，则创建一个空文件，（等同于touch命令） ：表示一个空输出，两个命令的唯一区别就是>filename不是在所有shell都可以正常工作的。
