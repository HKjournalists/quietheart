这篇文章讲解c语言中的可变参数相关的内容.
http://www.yuanma.org/data/2009/0724/article_3769.htm
C语言的参数列表是从右往左被压入堆栈的，假设现在堆栈中有关参数的情况如下：

栈顶-不可变参数1-不可变参数2-....-不可变参数n-可变参数1-可变参数2-......可变参数n-栈低

   现在假设我们知道了"可变参数n"的类型，我们还需要知道什么就能得到这个参数？这个参数的地址！那如何得到这个地址？你必须知道前一个的地址和类型！那怎么知道前一个的类型和地址？......一直到最前面那个已经知道了类型和地址的不可变参数n是不是就搞定了？！
   好了，明白了上面的过程，就容易理解库里面那些宏或者函数的用途了。下面看一下ansi标准的实现。只讲相关的三个宏，用这三个宏就实现了上面的过程。这三个宏是：
  va_start( va_list arg_ptr, prev_param )
  va_arg( va_list arg_ptr, type )
  va_end( va_list arg_ptr )   1.va_start宏
  这个函数用于确定第一个不可变参数的位置。它是如何做到的？就是通过最后一个不可变参数n实现的，因此它里面有两个参数，一个是不可变参数n，一个是可变参数1的地址。因为不可变参数n的地址和类型都能够得到，因此只要将这个指针（将它的地址赋给一个相同类型的指针）加1就能得到可变参数1的指针，通过这个宏，va_list的指针就指向第一个可变参数。   2.va_arg宏
  这个函数的作用就是获得当前指向的参数的值。但当前我们只是得到了可变参数1的地址，它的类型怎么确定？只能通过前面的不可变参数来传达这个信息，像printf里面的格式化字符串，或者你可以认为可变参数列表的参数类型和第几个不可变参数的相同。这种信息的传递是由程序员来设计的。   3.va_end宏
  因为在va_start的实现中可能会有对参数列表的动态内存分配，需要调用va_end宏来释放。如果忘记了，很可能会“内存泄露”。  
 
#include <stdarg.h>
#include <stdio.h>
void foo(char *fmt, ...)
{
    va_list ap;
    int d;
    char c;
    char *s;

    va_start(ap, fmt);
    while(*fmt)
    {
        switch(*fmt++)
        {
            case 's':
            {
                s = va_arg(ap, char *);
                printf("string %s\n", s);
                break;
            }
            case 'd':
            {
                d = va_arg(ap, int);
                printf("int %d\n", d);
                break;
            }
            case 'c':
            {
                c = (char)va_arg(ap, int);
                printf("char %c\n", c);
                break;
            }
        }
    }
    va_end(ap);
}

int main()
{
      foo("csds", 'b', "of", 50, "you");
      return 0;
}
